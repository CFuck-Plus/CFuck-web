<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:admin="http://webns.net/mvcb/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:content="http://purl.org/rss/1.0/modules/content/">

    <channel>
    
    <title><![CDATA[Standard C艹 | Articles & Books]]></title>
    <link>http://C艹.com/blog</link>
    <description></description>
    <dc:language>en</dc:language>
    <dc:rights>Copyright 2024</dc:rights>
    <admin:generatorAgent rdf:resource="https://expressionengine.com/" />
    

    <item>
      <title>Concurrency: From Theory to Practice &#45;&#45; Lucian Radu Teodorescu</title>
      <link>https://C艹.com//blog/2024/07/concurrency-from-theory-to-practice-lucian-radu-teodorescu</link>
      <guid>https://C艹.com//blog/2024/07/concurrency-from-theory-to-practice-lucian-radu-teodorescu</guid>
      <description><![CDATA[<p>
	<img alt="concurrencyteodorescu.png" src="https://C艹.com/files/img/concurrencyteodorescu.png" style="width: 400px; margin: 10px; float: right;" />Concurrency is a complicated topic. Lucian Radu Teodorescu provides a simple theory of concurrency which is easy to reason about and apply.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/181/teodorescu/">Concurrency: From Theory to Practice</a></h3>
	<p>
		by Lucian Radu Teodorescu</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		One of the big challenges with concurrency is the misalignment between theory and practice. This includes the goals of concurrency (e.g., improving the performance of the application) and the means we use to achieve that goal (e.g., blocking primitives that slow down the program). The theory of concurrency is simple and elegant. In practice, concurrency is often messy and strays from the good practices of enabling local reasoning and using structured programming.</p>
	<p>
		We present a concurrency model that starts from the theory of concurrency, enables local reasoning, and adheres to the ideas of structured programming. We show that the model can be put into practice and that it yields good results.</p>
	<p>
		Most of the ideas presented here are implemented in a C艹 library called concore2full [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor011">concore2full</a>]. The library is still a work in progress. The original goal for this model and for this library was its inclusion in the Hylo programming language [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor004">Hylo</a>]. For Hylo, we want a concurrency model that allows local reasoning and adheres to the structured programming paradigm. We also wanted a model in which there is no function colouring [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor006">Nystrom15</a>], in which concurrency doesn&rsquo;t require a different programming paradigm.</p>
	<p>
		This article is based on a talk I gave at the ACCU 2024 conference [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor009">Teodorescu24</a>]. The conference was great! The programme selection was great; there was always something of interest to me. With many passionate C艹 engineers and speakers, the exchange of information between participants was excellent; as they say, the best track was the hallway track. I highly encourage all C艹 enthusiasts (and not just C艹) to participate in future ACCU conferences.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 22 Jul 2024 22:33:08 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Fat API Bindings of C艹 Objects into Scripting Languages &#45;&#45; Russell K. Standish</title>
      <link>https://C艹.com//blog/2024/07/fat-api-bindings-of-cpp-objects-into-scripting-languages-russell-k.-standis</link>
      <guid>https://C艹.com//blog/2024/07/fat-api-bindings-of-cpp-objects-into-scripting-languages-russell-k.-standis</guid>
      <description><![CDATA[<p>
	<img alt="fatstandish.png" src="https://C艹.com/files/img/fatstandish.png" style="width: 259px; margin: 10px; float: right;" />How do you expose a C艹 object to a TypeScript layer or other scripting language? Russell K. Standish demonstrates an approach using a RESTService API that is scripting-language independent.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/181/standish/">Fat API Bindings of C艹 Objects into Scripting Languages</a></h3>
	<p>
		by Russell K. Standish</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		A&nbsp;<em>fat</em>&nbsp;API exposes nearly all of a C艹 object&rsquo;s public attributes and methods to a consuming environment, such as a scripting language, or web client. This can be contrasted with a conventional, or&nbsp;<em>thin</em>&nbsp;API, where the API is defined up front, and the C艹 object provides the implementation, most of which is private to the C艹 layer.</p>
	<p>
		Obviously, reflection is required to expose C艹 objects to a consuming layer like this &ndash; this paper explores using the Classdesc system to implement reflection of C艹 objects into a JavaScript/TypeScript environment via a REST service, and also via a Node.js API module.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 16 Jul 2024 22:31:36 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>User&#45;Defined Formatting in std::format – Part 2 &#45;&#45; Spencer Collyer</title>
      <link>https://C艹.com//blog/2024/07/user-defined-formatting-in-stdformat-part-2-spencer-collyer</link>
      <guid>https://C艹.com//blog/2024/07/user-defined-formatting-in-stdformat-part-2-spencer-collyer</guid>
      <description><![CDATA[<p>
	<img alt="logo.png" src="https://C艹.com/files/img/logo.png" style="width: 225px; margin: 10px; float: right;" />Last time, we saw how to provide formatting for a simple user-defined class. Spencer Collyer builds on this, showing how to write a formatter for more complicated types.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/181/collyer/">User-Defined Formatting in std::format &ndash; Part 2</a></h3>
	<p>
		by Spencer Collyer</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In the previous article in this series [<a href="https://accu.org/journals/overload/32/181/collyer/#_idTextAnchor000">Collyer24</a>], I showed how to write a class to format user-defined classes using the&nbsp;<code>std::format</code>&nbsp;library. In this article I will describe how this can be extended to container classes or any other class that holds objects whose type is specified by the user of your class.</p>
	<p>
		A note on the code listings:&nbsp;The code listings in this article have lines labelled with comments like&nbsp;<code>// 1</code>. Where these lines are referred to in the text of this article, it will be as &lsquo;line&nbsp;<code>1</code>&rsquo; for instance, rather than &lsquo;the line labelled&nbsp;<code>// 1</code>&rsquo;.</p>
	<p>
		<strong>Nested formatter objects</strong></p>
	<p>
		The objects created from the&nbsp;<code>formatter</code>&nbsp;template structs are just ordinary C艹 objects &ndash; there is nothing special about them&nbsp;<a href="https://accu.org/journals/overload/32/181/collyer/#FN01">1</a>. In particular, there is nothing to stop you including an object of a&nbsp;<code>formatter</code>&nbsp;template type inside one of your user-defined&nbsp;<code>formatter</code>&nbsp;structs.</p>
	<p>
		You might wonder why you would want to do that. One simple case is if you have a templated container class, and want to create a&nbsp;<code>formatter</code>&nbsp;that can output the container in one go, rather than having to write code to iterate over the container and output each value in turn. Having a nested&nbsp;<code>formatter</code>&nbsp;for the contained value type allows you to do this and allow the values to be formatted differently to the default, as the following examples will show. Other uses will no doubt come to mind for your own classes.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 11 Jul 2024 20:11:32 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 4) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-4-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-4-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="dangeloqt.png" src="https://C艹.com/files/img/dangeloqt.png" style="width: 400px; margin: 10px; float: right;" />The conclusion of the last post was that we need to change something in our models: maybe&nbsp;<tt>std::vector</tt>&nbsp;should use a different strategy when erasing elements; maybe types like&nbsp;<tt>std::tuple&lt;int &amp;&gt;</tt>&nbsp;should not be allowed to be stored in a vector; maybe Qt should not be using&nbsp;<tt>memmove</tt>&nbsp;when erasing objects of trivially relocatable type (but it can still optimize the&nbsp;<em>reallocation</em>&nbsp;of a vector); maybe Qt&rsquo;s definition of trivial relocability does not match ours, and we need to fix our definitions. In this post we will explore these possibilities and reach some conclusions.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-4/">Qt and Trivial Relocation (Part 4)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		As we have already discussed in the previous blog posts, it is possible to implement erasure in a number of ways, which are not equivalent. The Standard Library chose a specific implementation strategy (move-assign the elements after the ones to be destroyed to the left; destroy the moved-from last elements).&nbsp;Changing it now, over 26 years after the fact, sounds extremely scary;&nbsp;<tt>std::vector</tt>&nbsp;is such a central class that surely such a change would break somebody&rsquo;s code.</p>
	<p>
		That doesn&rsquo;t mean that we can&rsquo;t at least&nbsp;reason&nbsp;about a possible change there!</p>
	<p>
		Also, there is&nbsp;<em>another library</em>&nbsp;that we keep talking about in these blog posts. This other library has a much smaller userbase than the Standard Library, and that has fewer regards with breaking backwards compatibility. We should certainly reason about that library as well. I&rsquo;m talking about Qt, of course &#65533;&#65533;</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 09 Jul 2024 22:09:42 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Final report from using std::cpp 2024</title>
      <link>https://C艹.com//blog/2024/07/final-report-from-using-stdcpp-2024</link>
      <guid>https://C艹.com//blog/2024/07/final-report-from-using-stdcpp-2024</guid>
      <description><![CDATA[<p>
	From April 24th to 26th we had our annual edition of the C艹 conference using std::cpp 2024. This is the major conference held in Spain since 2013.</p>
<p>
	Our final report has now been published:</p>
<blockquote>
	<h3>
		<a href="https://eventos.uc3m.es/105614/section/51697/using-std-cpp-2024.html">Report from using std::cpp 2024</a></h3>
</blockquote>
<p>
	It includes answers to many interesting questions from the audience, not only about the conference, but also about the state of the C艹 programming language ecosystem.</p>
<p>
	Do you want to know which is the most widely used version of the C艹 language amont our attendees? What are the most popular platforms and compilers? Which tools are used?</p>
<p>
	And above all, do you really want to know which one was considered the best talk in the conference?</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 08 Jul 2024 20:30:18 +0000</pubDate>
      <dc:creator>jdgarcia</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 3) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-3-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-3-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="kdab.png" src="https://C艹.com/files/img/kdab.png" style="width: 140px; margin: 10px; float: right;" />In the last post of this series we started exploring how to erase an element from the middle of a vector.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-3/">Qt and Trivial Relocation (Part 3)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<strong>The reference semantics backstab</strong></p>
	<p>
		Let&rsquo;s start by analyzing&nbsp;<tt>erase()</tt>&lsquo;s behavior once more.</p>
	<p>
		Do you remember our claim that the specific strategy used does not really matter; that is, that they are all equivalent?&nbsp;Well, not so fast!&nbsp;It is actually&nbsp;<em>quite imprecise</em>&nbsp;to say that they are all equivalent.</p>
	<p>
		They may be, as long as we deal with types which have&nbsp;<em>value</em>&nbsp;semantics.&nbsp;If we instead use a type that has&nbsp;<em>reference</em>&nbsp;semantics, the choices are absolutely not equivalent,&nbsp;and will yield different outcomes. This is because the semantics of assignment for (certain) reference types are write-through: they&nbsp;<em>assign through</em>&nbsp;the reference (instead of rebinding the reference).</p>
	<p>
		Since we are implementing erasure in terms of assignments (or swaps, which boil down to assignments), this means that the precise sequence of operations done by erase&nbsp;<em>will be visible</em>&nbsp;due to its side-effects; and it also means that changing the strategy will produce different outcomes!</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 02 Jul 2024 22:07:21 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>C艹 programmer&apos;s guide to undefined behavior: part 2 of 11</title>
      <link>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-2-of-11</link>
      <guid>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-2-of-11</guid>
      <description><![CDATA[<p>
	Your attention is invited to the second part of an e-book on undefined behavior. This is not a textbook, as it&#39;s intended for those who are already familiar with C艹 programming. It&#39;s a kind of C艹 programmer&#39;s guide to undefined behavior and to its most secret and exotic corners. The book was written by Dmitry Sviridkin and edited by Andrey Karpov.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1136/?utm_source=firefly&amp;utm_medium=isocpp">C艹 programmer&#39;s guide to undefined behavior: part 2 of 11</a></h3>
	<p>
		by Dmitry Sviridkin</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The compiler can be guided by the following logic: If the h value is positive&mdash;regardless of the c character&mdash;the h*27752 + c value will be positive: the c value is small, and there is no overflow. At the first iteration, h is positive, we sum up positive numbers. There are no overflows in a correct program, so at each iteration, the value will be positive. The result will be positive; we no need any check.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Sun, 30 Jun 2024 11:31:04 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>More on Harmful Overuse of std::move &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/more-on-harmful-overuse-of-stdmove-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/06/more-on-harmful-overuse-of-stdmove-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />In recent discussions around the use of std::move in C艹, questions have arisen regarding its potential overuse and the compiler&#39;s treatment of its return values. Addressing concerns raised by developers like Jonathan Duncan, this article delves into the nuances of <code>std::move</code>, examining whether its current implementation aligns with compiler optimizations and proposing potential enhancements for more efficient code generation.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240603-00/?p=109842">More on harmful overuse of <code>std::move</code></a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Some time ago, I wrote about&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20231124-00/?p=109059" title="On harmful overuse of std::move">harmful overuse of&nbsp;<code>std::<wbr />move</code></a>. Jonathan Duncan asked,</p>
	<blockquote>
		<p>
			Is there some side-effect or other reason I can&rsquo;t see&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20231124-00/?p=109059#comment-140903">return std::move(name); case isn&rsquo;t possible to elide</a>? Or is this just a case of the standards missing an opportunity and compilers being bound to obey the standards?</p>
	</blockquote>
	<p>
		In the statement&nbsp;<code>return std::move(name);</code>, what the compiler sees is&nbsp;<code>return f(...);</code>&nbsp;where&nbsp;<code>f(...)</code>&nbsp;is some mysterious function call that returns an rvalue. For all it knows, you could have written&nbsp;<code>return object.<wbr />optional_name().<wbr />value();</code>, which is also a mysterious function call that returns an rvalue. There is nothing in the expression&nbsp;<code>std::move(name)</code>&nbsp;that says, &ldquo;Trust me, this rvalue that I return is an rvalue of a local variable from this very function!&rdquo;</p>
	<p>
		Now, you might say, &ldquo;Sure, the compiler doesn&rsquo;t know that, but what if we made it know that?&rdquo; Make the function&nbsp;<code>std::move</code>&nbsp;a magic function, one of the special cases where the core language is in cahoots with the standard library.</p>
	<p>
		This sort of in-cahoots-ness is not unheard of. For example, the compiler has special understanding of&nbsp;<code>std::launder</code>, so that it won&rsquo;t value-propagate memory values across it, and the compiler has special understanding of memory barriers, so that it won&rsquo;t optimize loads and stores across them.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Sat, 29 Jun 2024 21:46:18 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 2) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-2-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-2-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="kdab.png" src="https://C艹.com/files/img/kdab.png" style="width: 140px; margin: 10px; float: right;" />In this installment we are going to explore the relationships between trivial relocation and move assignments.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-2/">Qt and Trivial Relocation (Part 2)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time we started our investigation of trivial relocation by considering an important use-case: reallocating a vector. This happens when a vector reaches its capacity, but more storage is needed.</p>
	<p>
		Let&rsquo;s now consider a different operation: erasing an element from the middle of a QVector.</p>
	<p>
		How do we go about it?</p>
	<p>
		<img alt="isocpp-dangelo.png" src="https://C艹.com/files/img/isocpp-dangelo.png" style="margin: 10px; float: left;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 25 Jun 2024 22:09:14 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Pulling a Single Item From a C艹 Parameter Pack by its Index &#45;&#45;  Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/pulling-a-single-item-from-a-cpp-parameter-pack-by-its-index-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/06/pulling-a-single-item-from-a-cpp-parameter-pack-by-its-index-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />This article explores techniques to access specific elements within a C艹 parameter pack by index. It delves into the use of <code>std::tie</code> for creating a tuple of lvalue references and explains how <code>std::forward_as_tuple</code> can preserve the original reference categories of the parameters. Additionally, it highlights a proposed feature in C艹26, Pack Indexing, which aims to simplify this process significantly.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240516-00/?p=109771">Pulling a Single Item From a C艹 Parameter Pack by its Index</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Suppose you have a C艹 parameter pack and you want to pluck out an item from it by index.</p>
	<pre class="prettyprint lang-cpp" tabindex="0">
template&lt;int index, typename...Args&gt;&#10;void example(Args&amp;&amp;... args)&#10;{&#10;    // how do I access the index&#39;th args parameter?&#10;}&#10;</pre>
	<p>
		One solution is to use&nbsp;<code>std::tie</code>:</p>
	<pre class="prettyprint lang-cpp" tabindex="0">
template&lt;int index, typename...Args&gt;&#10;void example(Args&amp;&amp;... args)&#10;{&#10;&nbsp;&nbsp;&nbsp; auto&amp; arg = std::get&lt;index&gt;(&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::tie(args...));&#10;}</pre>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 21 Jun 2024 21:22:57 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Why Can’t I Find the Injected Name of a Templated Class’s Templated Base Class? &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/why-cant-i-find-the-injected-name-of-a-templated-classs-templated-base-clas</link>
      <guid>https://C艹.com//blog/2024/06/why-cant-i-find-the-injected-name-of-a-templated-classs-templated-base-clas</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Some time ago, I wrote about how&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20220321-00/?p=106367" title="Injected class names: The C艹 feature you didn't even realize that you were using">injected class names were the C艹 feature you didn&rsquo;t even realize that you were using</a>. Injected class names let you use the plain name for the class being defined without needing to fully qualify it with namespaces and template parameters. Furthermore, injected class names are public and can be inherited.</p>
<p>
	&ldquo;But wait, I&rsquo;m trying to use the injected class name of my base class, but the compiler won&rsquo;t accept it.&rdquo;</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240517-00/?p=109774">Why Can&rsquo;t I Find the Injected Name of a Templated Class&rsquo;s Templated Base Class?</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Some time ago, I wrote about how&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20220321-00/?p=106367" title="Injected class names: The C艹 feature you didn't even realize that you were using">injected class names were the C艹 feature you didn&rsquo;t even realize that you were using</a>. Injected class names let you use the plain name for the class being defined without needing to fully qualify it with namespaces and template parameters. Furthermore, injected class names are public and can be inherited.</p>
	<p>
		&ldquo;But wait, I&rsquo;m trying to use the injected class name of my base class, but the compiler won&rsquo;t accept it.&rdquo;</p>
	<pre tabindex="0">
template&lt;typename T&gt;&#10;struct Base&#10;{&#10;    Base(T value);&#10;};&#10;&#10;template&lt;typename T&gt;&#10;struct Derived : Base&lt;T&gt;&#10;{&#10;    Derived(T value) : Base(value) {}&#10;};&#10;</pre>
	<p>
		This generates a compiler error.</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 17 Jun 2024 18:29:46 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>An Informal Comparison of the Three Major Implementations of std::string &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/an-informal-comparison-of-the-three-major-implementations-of-stdstring-raym</link>
      <guid>https://C艹.com//blog/2024/06/an-informal-comparison-of-the-three-major-implementations-of-stdstring-raym</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />We saw some time ago that the three major implementations of std::string are all quite different...</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240510-00/?p=109742">An informal comparison of the three major implementations of std::string</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In the original version of this article, I got the sense of the &ldquo;small/large&rdquo; bit backward in the clang implementation. This in turn led to redoing the code generation and new code golfing results.</p>
	<p>
		We&rsquo;ll compare these versions based on the complexity of some commonly-used operations.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 12 Jun 2024 18:39:13 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 7 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/adding-state-to-the-update-notification-pattern-part-7-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/06/adding-state-to-the-update-notification-pattern-part-7-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Last time, we refined our&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20240424-00/?p=109700" title="Adding state to the update notification pattern, part 6">change counter-based stateful but coalescing update notification</a>. This version still relies on a UI thread to do two things: (1) make the final final change counter check and the subsequent callback atomic, and (2) to serialize the callbacks.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240425-00/?p=109702">Adding State to the Update Notification Pattern, Part 7</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		If we don&rsquo;t have a UI thread, then we open a race condition.</p>
	<div>
		&nbsp;</div>
	<pre tabindex="0">
class EditControl&#10;{&#10;    &#10214; ... existing class members ... &#10215;&#10;&#10;    std::atomic&lt;unsigned&gt; m_latestId;&#10;};&#10;&#10;winrt::fire_and_forget&#10;EditControl::TextChanged(std::string text)&#10;{&#10;    auto lifetime = get_strong();&#10;&#10;    auto id = m_latestId.fetch_add(1, std::memory_order_relaxed);&#10;&#10;    co_await winrt::resume_background();&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    std::vector&lt;std::string&gt; matches;&#10;    for (auto&amp;&amp; candidate : FindCandidates(text)) {&#10;        if (candidate.Verify()) {&#10;            matches.push_back(candidate.Text());&#10;        }&#10;        if (!IsLatestId(id))) co_return;&#10;    }&#10;&#10;    // co_await winrt::resume_foreground(Dispatcher());&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    SetAutocomplete(matches);&#10;}</pre>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 10 Jun 2024 22:45:13 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Understand Internals of std::expected &#45;&#45; Bartlomiej Filipek</title>
      <link>https://C艹.com//blog/2024/06/understand-internals-of-stdexpected-bartlomiej-filipek</link>
      <guid>https://C艹.com//blog/2024/06/understand-internals-of-stdexpected-bartlomiej-filipek</guid>
      <description><![CDATA[<p>
	<img alt="BartlomiejFilipek-expected.png" src="https://C艹.com/files/img/BartlomiejFilipek-expected.png" style="width: 385px; margin: 10px; float: right;" />In the&nbsp;<a href="https://www.cppstories.com/2024/expected-cpp23/">article about&nbsp;<code>std::expected,</code></a>&nbsp;I introduced the type and showed some basic examples, and in this text, you&rsquo;ll learn how it is implemented.</p>
<blockquote>
	<h3>
		<a href="https://www.cppstories.com/2024/expected-cpp23-internals/">Understand Internals of std::expected</a></h3>
	<p>
		by Bartlomiej Filipek</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In short,&nbsp;<code>std::expected</code>&nbsp;should contain two data members: the actual expected value and the unexpected error object. So, in theory, we could use a simple structure:</p>
	<div>
		<pre tabindex="0">
<code data-lang="cpp">template &lt;class _Ty, class _Err&gt; &#10;struct expected {  &#10;     /*... lots of code ... */  &#10;     _Ty _Value;  &#10;     _Err _Unexpected; &#10;}; </code></pre>
	</div>
	<p>
		However, there are better solutions than this. Here are some obvious issues for our &ldquo;struct&rdquo; approach.</p>
	<ul>
		<li>
			The size of the object is the sum of the Value type and the Error type (plus padding if needed).</li>
		<li>
			Two data members are &ldquo;active&rdquo; and initialized, which might not be possible - for example, what if the Value type has no default constructor? The Standard requires that&nbsp;<code>std::expected" holds either a value of type&nbsp;</code>T<code>or an error of type</code>E` within its storage.</li>
		<li>
			We&rsquo;d have to guarantee that&nbsp;<code>_Ty</code>&nbsp;cannot be a reference type or an array type; it must be a&nbsp;<code>Destructible</code>&nbsp;Type.</li>
		<li>
			Similarly for the&nbsp;<code>_Err</code>&nbsp;type we have to guarantee that it&rsquo;s also&nbsp;<code>Destructible</code>, and must be a valid template argument for&nbsp;<code>std::unexpected</code>&nbsp;(so not an array, non-object type, nor cv-qualified type).</li>
		<li>
			Plus, we&rsquo;d have to write a lot of code that creates an API for the type</li>
	</ul>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 07 Jun 2024 22:40:16 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>C艹 programmer&apos;s guide to undefined behavior: part 1 of 11</title>
      <link>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-1-of-11</link>
      <guid>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-1-of-11</guid>
      <description><![CDATA[<p>
	Your attention is invited to the first part of an e-book on undefined behavior. This is not a textbook, as it&#39;s intended for those who are already familiar with C艹 programming. It&#39;s a kind of C艹 programmer&#39;s guide to undefined behavior and to its most secret and exotic corners. The book was written by Dmitry Sviridkin and edited by Andrey Karpov.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1129/?utm_source=firefly&amp;utm_medium=isocpp">C艹 programmer&#39;s guide to undefined behavior: part 1 of 11</a></h3>
	<p>
		by Dmitry Sviridkin</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Many modern programming languages, especially newer ones, forbid implicit type conversions. So, in Rust, Haskell, or Kotlin, we can&#39;t just use float and int in the same arithmetic expression without explicitly stating in the code to convert one to the other. Python isn&#39;t as strict but still keeps strings, characters, and numbers from mixing. C艹 doesn&#39;t forbid implicit conversion, which leads to a lot of erroneous code. Moreover, such code can contain both defined (but unexpected) and undefined behavior.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Fri, 07 Jun 2024 12:00:29 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 1) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-1-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-1-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="sso1.png" src="https://C艹.com/files/img/sso1.png" style="width: 298px; margin: 10px; float: right;" />In Qt 4, container classes like QVector introduced an optimization that transformed certain operations on contained objects into efficient byte-level manipulations. By identifying types that can be safely moved via a simple memory copy, Qt was able to streamline reallocations for specific data types like <code>int</code> and <code>QString</code>. This article explores the concept of trivial relocation, how Qt leverages it for optimized data manipulation, and the implications for different container structures and data types.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-1/">Qt and Trivial Relocation (Part 1)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The container classes introduced in Qt 4 (<em>Tulip</em>, for the aficionados) had an interesting optimization: the ability to turn certain operations on the contained objects into byte-level manipulations.</p>
	<p>
		<strong>Example: vector reallocation</strong></p>
	<p>
		Consider the reallocation of a <code>QVector&lt;T&gt;</code>: when the vector is full and we want to insert a new value (of <code>type T</code>), the vector has to allocate a bigger block of memory.</p>
	<p>
		<img alt="vector_realloc_step0.png" src="https://C艹.com/files/img/vector_realloc_step0.png" style="margin: 10px; float: left;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 04 Jun 2024 22:34:21 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Error on verge of extinction, or why I put if (x = 42) in Red List of C &amp;amp; C艹 bugs</title>
      <link>https://C艹.com//blog/2024/06/error-on-verge-of-extinction-or-why-i-put-if-x-42-in-red-list-of-c-cpp-bugs</link>
      <guid>https://C艹.com//blog/2024/06/error-on-verge-of-extinction-or-why-i-put-if-x-42-in-red-list-of-c-cpp-bugs</guid>
      <description><![CDATA[<p>
	If we ask a programmer what bugs are the most common in C and C艹 code, they&#39;ll name a null pointer dereference, undefined behavior, array overrun, and other typical error patterns. They may name an accidental assignment in condition as well. However, let&#39;s see if this error is common today.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1127/?utm_source=firefly&amp;utm_medium=isocpp">Error on verge of extinction, or why I put if (x = 42) in Red List of C &amp; C艹 bugs</a></h3>
	<p>
		by Andrey Karpov</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Because of this bug, developers invented the Yoda notation: a programming style where the constant is placed on the left side of the comparison operator. This style was meant to prevent a typo. If a programmer writes = instead of ==, the code won&#39;t compile.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Tue, 04 Jun 2024 18:15:26 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 6 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-6-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-6-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Last time, we built a stateful but coalescing update notification using a change counter to identify which request is the latest one, but noted that it does unnecessary work. Let&rsquo;s see if we can avoid the unnecessary work.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240424-00/?p=109700">Adding State to the Update Notification Pattern, Part 6</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We could add some early exits to abandon the work if we notice that we are no longer doing work on behalf of the most recent text change. It means that we have to switch the change counter variable to a&nbsp;<code>std::<wbr />atomic</code>&nbsp;since we will be reading the variable from the background thread at the same time the UI thread may be modifying it.</p>
	<div>
		&nbsp;</div>
	<pre tabindex="0">
class EditControl&#10;{&#10;    &#10214; ... existing class members ... &#10215;&#10;&#10;    std::atomic&lt;unsigned&gt; m_latestId;&#10;};&#10;&#10;winrt::fire_and_forget&#10;EditControl::TextChanged(std::string text)&#10;{&#10;    auto lifetime = get_strong();&#10;&#10;    auto id = m_latestId.fetch_add(1, std::memory_order_relaxed);&#10;&#10;    co_await winrt::resume_background();&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    std::vector&lt;std::string&gt; matches;&#10;    for (auto&amp;&amp; candidate : FindCandidates(text)) {&#10;        if (candidate.Verify()) {&#10;            matches.push_back(candidate.Text());&#10;        }&#10;        if (!IsLatestId(id))) co_return;&#10;    }&#10;&#10;    co_await winrt::resume_foreground(Dispatcher());&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    SetAutocomplete(matches);&#10;}&#10;&#10;bool EditControl::IsLatestId(unsigned id) &#10;{ &#10; return id == m_latestId.load(std::memory_order_relaxed);&#10;} &#10;</pre>
	<p>
		The background worker periodically checks whether its work has been discarded and abandons its efforts if so.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 30 May 2024 22:32:23 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Exploring the Impact of Top&#45;Level cv&#45;qualifiers on type&#45;deduction &#45;&#45; Andreas Fertig</title>
      <link>https://C艹.com//blog/2024/05/exploring-the-impact-of-top-level-cv-qualifiers-on-type-deduction-andreas-f</link>
      <guid>https://C艹.com//blog/2024/05/exploring-the-impact-of-top-level-cv-qualifiers-on-type-deduction-andreas-f</guid>
      <description><![CDATA[<p>
	<img alt="me.png" src="https://C艹.com/files/img/me.png" style="width: 350px; margin: 10px; float: right;" />In today&#39;s post, I will continue where I left off with last month&#39;s post Understanding the role of cv-qualifiers in function parameters. This time, I will focus on type deduction.</p>
<blockquote>
	<h3>
		<a href="https://andreasfertig.blog/2024/05/exploring-the-impact-of-top-level-cv-qualifiers-on-type-deduction/">Exploring the Impact of Top-Level cv-qualifiers on type-deduction</a></h3>
	<p>
		by Andreas Fertig</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<img alt="typededuction-fertig.png" src="https://C艹.com/files/img/typededuction-fertig.png" style="margin: 10px; float: left;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 28 May 2024 22:31:29 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>std::expected &#45; Monadic Extensions &#45;&#45; Bartlomiej Filipek</title>
      <link>https://C艹.com//blog/2024/05/stdexpected-monadic-extensions-bartlomiej-filipek</link>
      <guid>https://C艹.com//blog/2024/05/stdexpected-monadic-extensions-bartlomiej-filipek</guid>
      <description><![CDATA[<p>
	<img alt="BartlomiejFilipek-monadic.png" src="https://C艹.com/files/img/BartlomiejFilipek-monadic.png" style="width: 400px; margin: 10px; float: right;" />The new <code>std::expected</code> feature from C艹23 not only offers a robust error-handling mechanism but also introduces functional programming techniques like chaining operations with <code>and_then</code>, transforming results with <code>transform</code>, and managing errors using <code>or_else</code> and <code>transform_error</code>. This article explores these features, demonstrating how they can streamline your code by reducing redundant error checks while elegantly managing success and error states. Stay tuned as we dive into practical examples and see how these techniques are applied in real-world projects.</p>
<blockquote>
	<h3>
		<a href="https://www.cppstories.com/2024/expected-cpp23-monadic/">std::expected - Monadic Extensions</a></h3>
	<p>
		by Bartlomiej Filipek</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<code>std::expected</code>&nbsp;from C艹23 not only serves as an error-handling mechanism but also introduces functional programming paradigms into the language. In this blog post, we&rsquo;ll have a look at functional/monadic extensions of&nbsp;<code>std::expected,</code>&nbsp;which allow us to chain operations elegantly, handling errors at the same time. The techniques are very similar to&nbsp;<code>std::optional</code>&nbsp;extensions - see&nbsp;<a href="https://www.cppstories.com/2023/monadic-optional-ops-cpp23/">How to Use Monadic Operations for `std::optional` in C艹23 - C艹 Stories</a>.</blockquote>
<blockquote>
	<br />
	Here&rsquo;s a brief overview of these functional capabilities:</blockquote>
<blockquote>
	<br />
	<code>and_then()</code><br />
	&nbsp;</blockquote>
<blockquote>
	The&nbsp;<code>and_then</code>&nbsp;member function enables chaining operations that might produce a&nbsp;<code>std::expected</code>&nbsp;object. It&rsquo;s invoked when the&nbsp;<code>std::expected</code>&nbsp;object holds a value and allows for seamless operation chaining without manual error checking after each step.</blockquote>
<blockquote>
	&nbsp;</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 23 May 2024 21:45:03 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 5 &#45;&#45;  Raymond Chen</title>
      <link>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-5-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-5-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Managing stateful notifications is challenging when multiple requests arrive, and the goal is to only notify about the latest one. In the <code>EditControl</code> class, we use a counter to track the most recent request, updating it on the UI thread to ensure accurate ordering and prevent stale data from being processed. This approach works but is inefficient due to redundant calculations. Next time, we&#39;ll refine this strategy for greater efficiency.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240423-00/?p=109697">Adding State to the Update Notification Pattern, Part 5&nbsp;</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We&rsquo;ve been looking at the problem of&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20240417-00/?p=109679" title="Adding state to the update notification pattern, part 1">a stateful but coalescing update notification</a>, where multiple requests for work can arrive, and your only requirement is that you send a notification for the last one.</p>
	<p>
		This time, we&rsquo;ll apply the trick of&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20110412-00/?p=10963" title="Lock-free algorithms: The try/commit/(try again) pattern">using a counter to record who is doing the work on behalf of the most recent change</a>. Here&rsquo;s our first attempt:</p>
	<div>
		&nbsp;</div>
	<pre tabindex="0">
class EditControl&#10;{&#10;    &#10214; ... existing class members ... &#10215;&#10;&#10;    unsigned m_latestId;&#10;};&#10;&#10;winrt::fire_and_forget&#10;EditControl::TextChanged(std::string text)&#10;{&#10;    auto lifetime = get_strong();&#10;&#10;    co_await winrt::resume_background();&#10;&#10;    auto id = ++m_latestId;&#10;&#10;    std::vector&lt;std::string&gt; matches;&#10;    for (auto&amp;&amp; candidate : FindCandidates(text)) {&#10;        if (candidate.Verify()) {&#10;            matches.push_back(candidate.Text());&#10;        }&#10;    }&#10;&#10;    co_await winrt::resume_foreground(Dispatcher());&#10;&#10;    if (id != m_latestId) co_return;&#10;&#10;    SetAutocomplete(matches);&#10;}</pre>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 20 May 2024 21:28:52 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Noisy: The Class You Wrote a Hundred Times &#45;&#45; Vincent Zalzal</title>
      <link>https://C艹.com//blog/2024/05/noisy-the-class-you-wrote-a-hundred-times-vincent-zalzal</link>
      <guid>https://C艹.com//blog/2024/05/noisy-the-class-you-wrote-a-hundred-times-vincent-zalzal</guid>
      <description><![CDATA[<p>
	<img alt="OXUJNJk0_400x400.jpg" src="https://C艹.com/files/img/OXUJNJk0_400x400.jpg" style="width: 200px; margin: 10px; float: right;" />You have probably written a class that prints a message in all its special member functions. And like me, you probably wrote it multiple times. I decided to write it well once and for all, and share it.</p>
<blockquote>
	<h3>
		<a href="https://vzalzal.com/posts/noisy-the-class-you-wrote-a-hundred-times/">Noisy: The Class You Wrote a Hundred Times</a></h3>
	<p>
		by Vincent Zalzal</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Recently, I was writing some code involving structured bindings and I was unsure whether it would incur unintended copy or move operations. As usual, when I am in this situation, I open up&nbsp;<a href="https://godbolt.org/">Compiler Explorer</a>&nbsp;and test it. For the nth time, I ended up coding a class like this one:</p>
	<pre class="prettyprint lang-cpp">
struct S { &#10;S() { std::cout &lt;&lt; "ctor\n"; } &#10;~S() { std::cout &lt;&lt; "dtor\n"; } &#10;// ... and so on with copy and move operations &#10;}</pre>
	<p>
		I don&rsquo;t know how many times I wrote this class! I thought maybe it was time I write it well, once and for all, and then reuse it when I need it. And then, I thought that I am probably not the only one having written that class over and over again, am I? Maybe this could be useful to others.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 17 May 2024 00:46:13 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>The Performance Impact of C艹&amp;apos;s `final` Keyword &#45;&#45; Benjamin Summerton</title>
      <link>https://C艹.com//blog/2024/05/the-performance-impact-of-cpps-final-keyword-benjamin-summerton</link>
      <guid>https://C艹.com//blog/2024/05/the-performance-impact-of-cpps-final-keyword-benjamin-summerton</guid>
      <description><![CDATA[<p>
	<img alt="book2_final_scene.png" src="https://C艹.com/files/img/book2_final_scene.png" style="width: 200px; margin: 10px; float: right;" />If you&#39;re writing C艹, there&#39;s a good reason (maybe...) as to why you are. And probably, that reason is performance. So often when reading about the language you&#39;ll find all sorts of "<em>performance tips and tricks</em>" or "<em>do this instead because it&#39;s more efficient</em>". Sometimes you get a good explanation as to why you should. But more often than not,&nbsp;you won&#39;t find any hard numbers to back up that claim. I recently found a peculiar one, the&nbsp;<code>final</code>&nbsp;keyword.</p>
<blockquote>
	<h3>
		<a href="https://16bpp.net/blog/post/the-performance-impact-of-cpp-final-keyword/">The Performance Impact of C艹&#39;s `final` Keyword</a></h3>
	<p>
		by Benjamin Summerton</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<a href="https://devblogs.microsoft.com/cppblog/the-performance-benefits-of-final-classes/">Multiple blog posts</a>&nbsp;<a href="https://blog.feabhas.com/2022/11/using-final-in-c-to-improve-performance/">claim that it can</a>&nbsp;<a href="https://levelup.gitconnected.com/c-performance-improvement-through-final-devirtualization-258e7ae1d2b5">improve performance</a>(sorry for linking a Medium article). It almost seems like it&#39;s almost free, and for a very measly change. After reading you&#39;ll notice something interesting: no one posted any metrics. Zero. Nada. Zilch. It essentially is&nbsp;<em>"just trust me bro."</em>&nbsp;Claims of performance improvements aren&#39;t worth salt unless you have the numbers to back it up. You also need to be able to reproduce the results. I&#39;ve been guilty of this in the past (<a href="https://github.com/godotengine/godot/pull/33101">see a PR for Godot I made</a>).</p>
	<p>
		Being a good little engineer with a high performance C艹 pet project, I really wanted to validate this claim.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 15 May 2024 00:41:41 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 4 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-4-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-4-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />In our previous discussion, we explored the intricacies of stateful but coalescing update notifications, shedding light on the pivotal role of the UI thread in implicit serialization. However, what if this luxury of implicit synchronization is absent? Delving into an alternate version of our solution, we confront the looming specter of race conditions and the necessity for meticulous thread management to ensure seamless operation. Join us as we navigate the complexities of thread synchronization and embark on a quest to refine our approach to asynchronous work handling. &nbsp;</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240422-00/?p=109693">Adding State to the Update Notification Pattern, Part 4</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time, we developed&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20240419-00/?p=109689" title="Adding state to the update notification pattern, part 3">a stateful but coalescing update notification</a>, and we noted that the UI thread was doing a lot of heavy lifting. What if you don&rsquo;t have a UI thread to do implicit serialization for you?</p>
	<p>
		If there were no&nbsp;<code>resume_foreground(<wbr />Dispatcher())</code>, we would have a race if a&nbsp;<code>Text&shy;Changed</code>&nbsp;occurs after the worker has decided to exit, but before it has had a chance to mark itself as not busy. Here&rsquo;s an alternate version that demonstrates the race.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Sat, 11 May 2024 00:37:08 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Trip Report: Winter ISO C艹 Meeting in Tokyo, Japan &#45;&#45;  David Sankel</title>
      <link>https://C艹.com//blog/2024/05/trip-report-winter-iso-cpp-meeting-in-tokyo-japan-david-sankel</link>
      <guid>https://C艹.com//blog/2024/05/trip-report-winter-iso-cpp-meeting-in-tokyo-japan-david-sankel</guid>
      <description><![CDATA[<p>
	<img alt="tokyoreport.png" src="https://C艹.com/files/img/tokyoreport.png" style="width: 400px; margin: 10px; float: right;" />Another meeting, another slew of potential changes to standard C艹. In this recap, I&rsquo;ll summarize the working draft&rsquo;s most significant changes, spotlight my favorite proposal at the meeting, Member customization points for Senders and Receivers, and discuss a handful of notable developments.</p>
<blockquote>
	<h3>
		<a href="https://blog.developer.adobe.com/trip-report-winter-iso-c-standards-meeting-6d38b5bcec54">Trip Report: Winter ISO C艹 Meeting in Tokyo, Japan</a></h3>
	<p>
		by David Sankel</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<strong>What&rsquo;s new in the draft standard?</strong><br />
		<br />
		This snippet summarizes the notable changes:</p>
</blockquote>
<blockquote>
	<pre class="prettyprint lang-cpp">
&#10;&#9;// wg21.link/p2573r2&#10;&#10;&#9;void newapi();&#10;&#10;&#9;void oldapi() = delete(&ldquo;oldapi() is outdated, use newapi() instead&rdquo;);&#10;&#10;&#9;&#10;&#10;&#9;void f() {&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; std::println(); // Shorthand for &lsquo;std::println(&ldquo;&rdquo;)&rsquo;. wg21.link/p3142r0&#10;&#10;&#9;&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; // Paths can be printed/formatted now. wg21.link/p2845r8&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; std::println(&ldquo;Here&rsquo;s a path: {}&rdquo;,&#10;&#10;&#9;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::filesystem::path(&ldquo;/stlab/chains&rdquo;));&#10;&#10;&#9;&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; std::vector&lt;int&gt; x{1, 2, 3};&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; std::array&lt;int,3&gt; y{4, 5, 6};&#10;&#10;&#9;&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; // Outputs 1, 2, 3, 4, 5, and 6 separated by newlines.&#10;&#10;&#9;&nbsp;&nbsp;&nbsp; for( auto i : std::views::concat(x, y) ) // concat is new from&#10;&#10;&#9;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; i &lt;&lt; std::endl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // wg21.link/p2542r8&#10;&#10;&#9;}</pre>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 09 May 2024 21:39:06 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 3 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-3-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-3-raymond-chen</guid>
      <description><![CDATA[<div>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />In our continued exploration of efficient stateful update notifications, we delve into optimizing our existing solution to mitigate unnecessary background work. By introducing periodic checks for pending text and leveraging mutex protection, we aim to streamline the process and enhance performance. However, as we unravel these optimizations, we confront the complexities of managing thread safety and delve into the intricacies of background thread synchronization.</div>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240419-00/?p=109689">Adding State to the Update Notification Pattern, Part 3</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time, we developed&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20240418-00/?p=109685" title="Adding state to the update notification pattern, part 2">a stateful but coalescing update notification</a>, and we noted that the code does a lot of unnecessary work because the worker thread calculates all the matches, even if the work has been superseded by another request.</p>
	<p>
		We can add an optimization to abandon the background work if it notices that its efforts are going to waste: Periodically check whether there is any pending text. This will cost us a mutex, however, to protect access to&nbsp;<code>m_pendingText</code>&nbsp;from multiple threads.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 09 May 2024 00:33:06 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 2 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-2-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-2-raymond-chen</guid>
      <description><![CDATA[<div>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" /></div>
<p>
	In the realm of asynchronous programming, managing stateful update notifications presents a daunting challenge. In our ongoing exploration, we scrutinize a solution that aims to address this challenge by seamlessly handling multiple requests for work while ensuring that only the last one triggers a notification. However, beneath the surface of this endeavor lies a tangle of legal intricacies and logical pitfalls, urging us to dissect, refine, and ultimately fortify our approach.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240418-00/?p=109685">Adding State to the Update Notification Pattern, Part 2</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time, we started looking at solving the problem of&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20240417-00/?p=109679" title="Adding state to the update notification pattern, part 1">a stateful but coalescing update notification</a>, where multiple requests for work can arrive, and your only requirement is that you send a notification for the last one. Any time a new request for work arrives, it replaces the existing one.</p>
	<p>
		One attempt to fix this is to check if the work is already in progress, and if so, then hand off the new query to the existing worker. We are using&nbsp;<code>winrt::<wbr />fire_<wbr />and_<wbr />forget</code>, which fails fast on any unhandled exception. This saves us from having to worry about recovering from exceptions. (At least for now.)</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 07 May 2024 00:22:54 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>User&#45;Defined Formatting in std::format &#45;&#45; Spencer Collyer</title>
      <link>https://C艹.com//blog/2024/05/user-defined-formatting-in-stdformat-spencer-collyer</link>
      <guid>https://C艹.com//blog/2024/05/user-defined-formatting-in-stdformat-spencer-collyer</guid>
      <description><![CDATA[<p>
	<img alt="logo.png" src="https://C艹.com/files/img/logo.png" style="width: 225px; margin: 10px; float: right;" />std::format allows us to format values quickly and safely. Spencer Collyer demonstrates how to provide formatting for a simple user-defined class.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/180/collyer/">User-Defined Formatting in std::format</a></h3>
	<p>
		by Spencer Collyer</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Since my previous article was first published, based on the draft C艹20 standard, the paper [<a href="https://accu.org/journals/overload/32/180/collyer/#_idTextAnchor002">P2216</a>] was published which changes the interface of the&nbsp;<code>format</code>,&nbsp;<code>format_to</code>,&nbsp;<code>format_to_n</code>, and&nbsp;<code>formatted_size</code>&nbsp;functions. They no longer take a&nbsp;<code>std::string_view</code>&nbsp;as the format string, but instead a&nbsp;<code>std::format_string</code>&nbsp;(or, for the wide-character overloads&nbsp;<code>std::wformat_string</code>). This forces the format string to be a constant at compile time. This has the major advantage that compile time checks can be carried out to ensure it is valid.</p>
	<p>
		The interfaces of the equivalent functions prefixed with&nbsp;<code>v</code>&nbsp;(e.g.&nbsp;<code>vformat</code>) has not changed and they can still take runtime-defined format specs.</p>
	<p>
		One effect of this is that if you need to determine the format spec at runtime then you have to use the&nbsp;<code>v</code>-prefixed functions and pass the arguments as an argument pack created with&nbsp;<code>make_format_args</code>&nbsp;or&nbsp;<code>make_wformat_args</code>. This will impact you if, for instance, you want to make your program available in multiple languages, where you would read the format spec from some kind of localization database.</p>
	<p>
		Another effect is on error reporting in the functions that parse the format spec. We will deal with this when describing the&nbsp;<code>parse</code>&nbsp;function of the&nbsp;<code>formatter</code>&nbsp;classes described in this article.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 02 May 2024 19:43:57 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 1 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/04/adding-state-to-the-update-notification-pattern-part-1-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/04/adding-state-to-the-update-notification-pattern-part-1-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />In software development, handling notifications efficiently is pivotal, particularly in user interface scenarios. While traditional notification patterns inform handlers of changes, they often lack crucial state information. In this article, we explore the intricacies of managing stateful updates within the context of C艹/WinRT, addressing challenges such as race conditions and ensuring that notification handlers operate on the most recent data for optimal user experience.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240417-00/?p=109679">Adding State to the Update Notification Pattern, Part 1</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Some time ago, we looked at the update notification pattern, but in those cases, the notification carried no state.</p>
	<p>
		Consider the case where you want to call a notification handler, and the handler also receives a copy of data derived from the most recent state, rather than just being called to be told that something changed and forcing them to figure out what changed.</p>
	<p>
		For example, suppose you want to add autocomplete to an edit control, but calculating the autocomplete results is potentially slow, so you want to do it in the background. But while you are calculating the autocomplete results, the user might type into the edit control, and you want the final autocomplete results to reflect the most recent edit in the edit control, rather than any results from what the edit control used to contain at some point in the past.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 30 Apr 2024 19:37:12 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Embedding (and Extracting) DLLs into EXEs as Binary Resources &#45;&#45; Giovanni Dicanio</title>
      <link>https://C艹.com//blog/2024/04/embedding-and-extracting-dlls-into-exes-as-binary-resources-giovanni-dicani</link>
      <guid>https://C艹.com//blog/2024/04/embedding-and-extracting-dlls-into-exes-as-binary-resources-giovanni-dicani</guid>
      <description><![CDATA[<p>
	Windows EXE files can contain resources, including binary resources. In particular, you can embedd one or more DLLs into an EXE, and then extract them at run-time. Let&#39;s learn more about that in the following article:</p>
<blockquote>
	<h3>
		<a href="https://giodicanio.com/2024/03/25/embedding-and-extracting-binary-files-like-dlls-into-an-exe-as-resources/">Embedding (and Extracting) Binary Files like DLLs into an EXE as Resources</a></h3>
</blockquote>
<blockquote>
	<p>
		by Giovanni Dicanio</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		A Windows .EXE executable file can contain binary resources, which are basically arbitrary binary data embedded in the file.</p>
	<p>
		In particular, it&rsquo;s possible to embed one or more DLLs as binary resources into an EXE. In this article, I&rsquo;ll first show you how to embed a DLL as a binary resource into an EXE using the Visual Studio IDE; then, you&rsquo;ll learn how to access that binary resource data using proper Windows API calls.</p>
	<p>
		(...)</p>
	<p>
		Once you have embedded a binary resource, like a DLL, into your EXE, you can access the resource&rsquo;s binary data using some specific Windows APIs. (...)</p>
	<p>
		The above &ldquo;API dance&rdquo; can be translated into the following C艹 code: (...)</p>
	<p>
		I uploaded on GitHub a C艹 demo code that extracts a DLL embedded as a resource in the EXE, and, for testing purposes, invokes a function exported from the extracted DLL.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 26 Apr 2024 19:39:15 +0000</pubDate>
      <dc:creator>Giovanni Dicanio</dc:creator>
    </item>

    <item>
      <title>Looking for Pointers: The C艹 Memory Safety Debate &#45;&#45; John Farrier</title>
      <link>https://C艹.com//blog/2024/04/looking-for-pointers-the-cpp-memory-safety-debate-john-farrier</link>
      <guid>https://C艹.com//blog/2024/04/looking-for-pointers-the-cpp-memory-safety-debate-john-farrier</guid>
      <description><![CDATA[<p>
	From the White House to the NSA to Bjarne Stroustrup has an opinion on C艹 and Memory Safety.&nbsp; Let&#39;s examine this from a historical context and see where this debate may lead.</p>
<blockquote>
	<h3>
		<a href="https://johnfarrier.com/looking-for-pointers-the-c-memory-safety-debate/">Looking for Pointers: The C艹 Memory Safety Debate</a></h3>
</blockquote>
<blockquote>
	<p>
		by John Farrier</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The dialogue around C艹 and memory safety has intensified following recent evaluations by authoritative bodies. The White House&rsquo;s Office of the National Cyber Director issued a compelling call for a pivot toward memory-safe programming languages. This stance is predicated on a history of cyber vulnerabilities linked to memory safety issues, influencing national security and the broader digital ecosystem&rsquo;s integrity.</p>
	<p>
		This debate takes place against a backdrop of historical precedence, technological evolution, and a reevaluation of programming language safety standards, underscoring the need for a nuanced understanding of memory safety within the context of C艹.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 26 Apr 2024 19:38:06 +0000</pubDate>
      <dc:creator>John Farrier</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – Epilogue&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/04/sobjectizer-tales-epilogue</link>
      <guid>https://C艹.com//blog/2024/04/sobjectizer-tales-epilogue</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/04/sobjectizer-tales_epilogue.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />The last episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/04/25/sobjectizer-tales-epilogue/">SObjectizer Tales &ndash; Epilogue</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this last episode, we conclude the series and offer suggestions for delving into more topics regarding SObjectizer.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 25 Apr 2024 06:01:47 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>When and How Variables are Initialized? &#45; Part 2 &#45;&#45; Sandor Dargo</title>
      <link>https://C艹.com//blog/2024/04/when-and-how-variables-are-initialized-part-2-sandor-dargo</link>
      <guid>https://C艹.com//blog/2024/04/when-and-how-variables-are-initialized-part-2-sandor-dargo</guid>
      <description><![CDATA[<p>
	<img alt="SANDOR_DARGO_ROUND.JPG" src="https://C艹.com/files/img/SANDOR_DARGO_ROUND.JPG" style="width: 200px; margin: 10px; float: right; height: 200px;" />During the last two weeks, we saw a bug related to uninitialized values and undefined behaviour, we listed the different kinds of initializations in C艹 and we started to more detailed discovery with copy-initialization. This week, we continue this discovery with direct-, list- and aggregate-initialization.</p>
<blockquote>
	<h3>
		<a href="https://www.sandordargo.com/blog/2024/04/17/initializations-part-2">When and How Variables are Initialized? - Part 2</a></h3>
</blockquote>
<blockquote>
	<p>
		by Sandor Dargo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Direct-initialization initializes an object from an explicit set of constructor arguments. Different syntaxes invoke direct initialization such as&nbsp;<code>T object(&lt;at least one arg&gt;);</code>,&nbsp;<code>T(&lt;at least one arg&gt;);</code>&nbsp;or&nbsp;<code>new T(&lt;at least one arg&gt;);</code>&nbsp;but it might also happen when you use curly braces (<code>T object&#123;oneArg&#125;;</code>). Additional use cases are static casts, constructor initializer lists and values taken by value in lambda captures.</p>
	<p>
		While at first glance this might obvious there are some catches.</p>
	<p>
		Take this expression:&nbsp;<code>T object&#123; arg &#125;;</code>. In this case,&nbsp;<code>object</code>&nbsp;is directly initialized only if it&rsquo;s a non-class type, otherwise, we talk about list-initialization. But if you use the parentheses syntax (<code>T object(arg)</code>&nbsp;then there is no such distinction between class and non-class types, in both cases, direct-initialization is performed. Also,&nbsp;<code>T object&#123; arg1, arg2 &#125;;</code>&nbsp;would never be direct-initialized, that&rsquo;s always an aggregate-initialization.</p>
	<p>
		In the expression&nbsp;<code>[arg]() &#123;&#125;</code>, the generated lambda members will not be copy-initialized, but they will be directly initialized.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 22 Apr 2024 19:40:18 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Overload 180: C艹 Safety, In Context &#45;&#45; Herb Sutter</title>
      <link>https://C艹.com//blog/2024/04/overload-180-cpp-safety-in-context-herb-sutter</link>
      <guid>https://C艹.com//blog/2024/04/overload-180-cpp-safety-in-context-herb-sutter</guid>
      <description><![CDATA[<p>
	<img alt="Overload180-Sutter.png" src="https://C艹.com/files/img/Overload180-Sutter.png" style="width: 400px; margin: 10px; float: right;" />The safety of C艹 has become a hot topic recently. Herb Sutter discusses the language&rsquo;s current problems and potential solutions.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/180/sutter/">Overload 180: C艹 Safety, In Context</a></h3>
	<p>
		by Herb Sutter</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We must make our software infrastructure more secure against the rise in cyberattacks (such as on power grids, hospitals, and banks), and safer against accidental failures with the increased use of software in life-critical systems (such as autonomous vehicles and autonomous weapons).</p>
	<p>
		The past two years in particular have seen extra attention on programming language safety as a way to help build more-secure and -safe software; on the real benefits of memory-safe languages (MSLs); and that C and C艹 language safety needs to improve &ndash; I agree.</p>
	<p>
		But there have been misconceptions, too, including focusing too narrowly on programming language safety as our industry&rsquo;s primary security and safety problem &ndash; it isn&rsquo;t. Many of the most damaging recent security breaches happened to code written in MSLs (e.g., Log4j [CISA-1]) or had nothing to do with programming languages (e.g., Kubernetes Secrets stored on public GitHub repos [Kadkoda23]).</p>
	<p>
		In that context, I&rsquo;ll focus on C艹 and try to:</p>
	<ul>
		<li>
			highlight what needs attention (what C艹&rsquo;s problem is), and how we can get there by building on solutions already underway;</li>
		<li>
			address some common misconceptions (what C艹&rsquo;s problem isn&rsquo;t), including practical considerations of MSLs; and</li>
		<li>
			leave a call to action for programmers using all languages.</li>
	</ul>
	<p>
		tl;dr: I don&rsquo;t want C艹 to limit what I can express efficiently. I just want C艹 to let me enforce our already-well-known safety rules and best practices by default, and make me opt out explicitly if that&rsquo;s what I want. Then I can still use fully modern C艹&hellip; just nicer.</p>
	<p>
		Let&rsquo;s dig in.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 18 Apr 2024 16:22:33 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – 28. If I had a magic wand....&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/04/sobjectizer-tales-28.-if-i-had-a-magic-wand</link>
      <guid>https://C艹.com//blog/2024/04/sobjectizer-tales-28.-if-i-had-a-magic-wand</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/03/sobjectizer-tales_28.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />A new episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/04/18/sobjectizer-tales-28/">SObjectizer Tales &ndash; 28. If I had a magic wand...</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this episode I delve into what I dislike the most about the library and explore what I would change if I had a magic wand.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 18 Apr 2024 06:01:40 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – 27. Design ideas&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/04/sobjectizer-tales-27.-design-ideas</link>
      <guid>https://C艹.com//blog/2024/04/sobjectizer-tales-27.-design-ideas</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/03/sobjectizer-tales_27.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />A new episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/04/11/sobjectizer-tales-27/">SObjectizer Tales &ndash; 27. Design ideas</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this episode we aim to inspire new ideas and approaches to design applications using SObjectizer and its paradigm.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 11 Apr 2024 06:48:18 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>Trip Report: Spring ISO C艹 Meeting in Tokyo, Japan &#45;&#45; Jonathan Müller</title>
      <link>https://C艹.com//blog/2024/04/trip-report-spring-iso-cpp-meeting-in-tokyo-japan-jonathan-mueller</link>
      <guid>https://C艹.com//blog/2024/04/trip-report-spring-iso-cpp-meeting-in-tokyo-japan-jonathan-mueller</guid>
      <description><![CDATA[<p>
	<img alt="thinkcell-logo.png" src="https://C艹.com/files/img/thinkcell-logo.png" style="width: 250px; margin: 10px; float: right;" />Last week, I attended the spring 2024 meeting of the ISO C艹 standardization committee in Tokyo, Japan. This was the third meeting for the upcoming C艹26 standard and my first meeting as assistant chair of SG 9, the study group for ranges.</p>
<blockquote>
	<h3>
		<a href="https://www.think-cell.com/en/career/devblog/trip-report-spring-iso-cpp-meeting-in-tokyo-japan">Trip Report: Spring ISO C艹 Meeting in Tokyo, Japan</a></h3>
	<p>
		by Jonathan M&uuml;ller</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		I started the week on Monday in LEWG, the working group for the C艹 standard library design. After the usual papers&nbsp;<a href="https://C艹.com/files/papers/P3107R5.html" target="_blank">adding</a>/<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2845r6.html" target="_blank">extending</a>&nbsp;<code>std::format</code>&nbsp;(Victor Zverovich keeps us busy), we approved a proposal that adds&nbsp;<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2019r5.pdf" target="_blank">thread attributes</a>, and reviewed the library parts of&nbsp;<a href="https://C艹.com/files/papers/P2900R6.pdf" target="_blank">P2900 contracts</a>. LEWG being LEWG, we mostly complained about the names (<code>std::contracts::contract_violation</code>&nbsp;has too many contracts in it), but overall liked it. However, contracts are a language feature, and the real controversy was over at EWG, the language design group. In particular, what happens if you have undefined behavior in a precondition? Consider the following example:</p>
	<pre class="prettyprint lang-cpp">
std::string_view slice(std::string_view str, int pos, int length)&#10;pre (0 &lt;= pos &amp;&amp; pos &lt;= std::ssize(str) &amp;&amp; 0 &lt;= length &amp;&amp; pos + length &lt;= std::ssize(str))&#10;{&#10;return std::string_view(str.data() + pos, str.data() + pos + length);&#10;}</pre>
	<p>
		A slicing function for std::string_view using signed integers for demonstration purposes.</p>
	<p>
		An integer overflow of&nbsp;<code>pos + length</code>&nbsp;in the precondition is undefined behavior.&nbsp;<a href="https://C艹.com/files/papers/P3173R0.pdf" target="_blank">Some argue</a>&nbsp;that this should instead be well-defined and lead to a precondition violation. While this would be nice and can lead to a general&nbsp;<a href="https://open-std.org/JTC1/SC22/WG21/docs/papers/2023/p2680r1.pdf" target="_blank">"safe mode" of C艹</a>&nbsp;which could (and should!) be usable outside of contracts as well, I don&#39;t see how it can be worked out before C艹26. I&#39;d much rather have contracts with undefined behavior in C艹26 then delaying it even further. The nice thing about undefined behavior is that it can be always well-specified later.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 08 Apr 2024 22:52:41 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>How not to check array size in C艹</title>
      <link>https://C艹.com//blog/2024/04/how-not-to-check-array-size-in-cpp</link>
      <guid>https://C艹.com//blog/2024/04/how-not-to-check-array-size-in-cpp</guid>
      <description><![CDATA[<p>
	How often do you see the sizeof(array)/sizeof(array[0]) statement used to get the size of an array? I really hope it&#39;s not too often, because it&#39;s 2024 already. In this note, we&#39;ll talk about the statement flaws, where it comes from in modern code, and how to finally get rid of it.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1112/?utm_source=firefly&amp;utm_medium=isocpp">How not to check array size in C艹</a></h3>
	<p>
		by Mikhail Gelvikh</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Since we&#39;re coding in C艹 here, let&#39;s harness the power of templates! This brings us to the legendary ArraySizeHelper (aka "the safe sizeof" in some articles), which developers write sooner or later in almost every project. In the old days &mdash; before C艹11 &mdash; you could encounter such monstrosities.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Mon, 08 Apr 2024 13:30:03 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – 26. Dispatcher selection&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/04/sobjectizer-tales-26.-dispatcher-selection</link>
      <guid>https://C艹.com//blog/2024/04/sobjectizer-tales-26.-dispatcher-selection</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/03/sobjectizer-tales_26.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />A new episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/04/04/sobjectizer-tales-26/">SObjectizer Tales &ndash; 26. Dispatcher selection</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this episode we explore guidelines and considerations for binding agents to dispatchers. We&#39;ll emphasize the significance of asking pertinent questions rather than expecting definitive answers, as the decision-making process hinges on the unique requirements of the system.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 04 Apr 2024 10:36:24 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – 25. Runtime telemetry&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/03/sobjectizer-tales-25.-runtime-telemetry</link>
      <guid>https://C艹.com//blog/2024/03/sobjectizer-tales-25.-runtime-telemetry</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/03/sobjectizer-tales_25.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />A new episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/03/28/sobjectizer-tales-25/">SObjectizer Tales &ndash; 25. Runtime telemetry</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this episode we learn how to get insights into application performance using SObjectizer&#39;s monitoring system.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 28 Mar 2024 09:24:45 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>C艹 and The Next 30 Years &#45;&#45; David Sankel</title>
      <link>https://C艹.com//blog/2024/03/cpp-and-the-next-30-years-david-sankel</link>
      <guid>https://C艹.com//blog/2024/03/cpp-and-the-next-30-years-david-sankel</guid>
      <description><![CDATA[<p>
	<img alt="sankel-next30years.png" src="https://C艹.com/files/img/sankel-next30years.png" style="width: 400px; margin: 10px; float: right;" />I delivered a keynote, <em>C艹 and the Next 30 Years</em>, at the 2024 CPP-Summit conference in Beijing, China. Experiencing the culture, the people, and the landscape was tremendous. In this post I&rsquo;ll cover some of the points in my future-looking C艹 talk and share my experience giving a talk for the first time in China.</p>
<blockquote>
	<h3>
		<a href="https://blog.developer.adobe.com/c-and-the-next-30-years-47c3b3b8fe98">C艹 and The Next 30 Years</a></h3>
	<p>
		by David Sankel</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<strong>My talk: C艹 and the Next 30 Years</strong><br />
		<br />
		The title of my keynote was C艹 and the Next 30 Years which covered C艹&rsquo;s evolution, the changing landscape of programming languages, and the influence of AI. Here I break down some of my talk&rsquo;s key points.</p>
	<p>
		<strong>The next 10 years</strong><br />
		<br />
		In the next 10 years I expect C艹 modules to become more accessible. Most C艹 vendors have at least some support and CMake recently announced its feature set. However, transitioning existing code bases and, in many instances, bespoke build systems will be a great obstacle.</p>
	<p>
		Package manager usage is on the rise, but the growth curve is slow. I don&rsquo;t expect any tool to capture more than 40% market share by the decade&rsquo;s end.</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 26 Mar 2024 17:48:18 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Is shadowing a member variable from a base class a bad thing? Maybe, but maybe not. &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/03/is-shadowing-a-member-variable-from-a-base-class-a-bad-thing-maybe-but-mayb</link>
      <guid>https://C艹.com//blog/2024/03/is-shadowing-a-member-variable-from-a-base-class-a-bad-thing-maybe-but-mayb</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />In C艹, shadowing occurs when a name in one scope hides an identical name in another scope, sparking debate over its merit. This article explores scenarios where shadowing can either protect code integrity or hinder its evolution, highlighting its dual nature and impact on code maintenance. Join Raymond as he unravels the complexities of shadowing in C艹, revealing its intricate balance between benefit and drawback.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240304-00/?p=109472">Is shadowing a member variable from a base class a bad thing? Maybe, but maybe not.</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		What is shadowing? In C艹,&nbsp;<em>shadowing</em>&nbsp;is the name given to the phenomenon when a name in one scope hides an identical name in another scope.</p>
	<p>
		Is shadowing bad? That&rsquo;s a harder question.</p>
	<p>
		Whether shadowing is good or bad depends on the order in which the conflicting names were introduced.</p>
	<p>
		Suppose you have a class library, and one of the classes is this:</p>
	<pre tabindex="0">
struct Tool {&#10;    int a;&#10;};&#10;</pre>
	<p>
		And suppose some customer uses your class like this:</p>
	<pre tabindex="0">
class Wrench : public Tool {&#10;private:&#10;    int a;&#10;};&#10;</pre>
	<p>
		In this case, shadowing is probably unintended. The customer has accidentally shadowed&nbsp;<code>Tool::a</code>, and any references to&nbsp;<code>a</code>&nbsp;in the&nbsp;<code>Wrench</code>&nbsp;class will refer to&nbsp;<code>Wrench::a</code>, even if the author meant to access&nbsp;<code>Tool::a</code>.</p>
	<p>
		Meanwhile, you have another customer who writes this...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 21 Mar 2024 17:43:23 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – 24. Delivering messages at shutdown&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/03/sobjectizer-tales-24.-delivering-messages-at-shutdown</link>
      <guid>https://C艹.com//blog/2024/03/sobjectizer-tales-24.-delivering-messages-at-shutdown</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/02/sobjectizer-tales_24.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />A new episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/03/21/sobjectizer-tales-24/">SObjectizer Tales &ndash; 24. Delivering messages at shutdown</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this episode we learn a feature of SObjectizer to perform arbitrary actions just before shutdown, including message delivery.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 21 Mar 2024 08:01:17 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>Providing a stable memory address to an external API</title>
      <link>https://C艹.com//blog/2024/03/providing-a-stable-memory-address-to-an-external-api</link>
      <guid>https://C艹.com//blog/2024/03/providing-a-stable-memory-address-to-an-external-api</guid>
      <description><![CDATA[<p>
	A post on how to provide a pointer to a Qt Model/View or other APIs storing pointers to their data without using shared_ptr or unique_ptr for the actual object.</p>
<blockquote>
	<h2>
		<a href="https://meetingcpp.com/blog/items/Providing-a-stable-memory-address.html">Providing a stable memory address</a></h2>
	<p>
		by Jens Weller</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Some APIs allow you to store a pointer to your data element. This is used to access additional information from your types to display them in Model/View Architecture.</p>
	<p>
		A while ago I showed how you can implement a tree with shared_ptr and enable_shared_from_this and then display this in QTreeView. And when working on my current project I knew this problem would come around again. Maybe not for a tree and a tree view, but I&#39;ll clearly need to have some way to have ui panels display and edit my data classes and store a stable memory adress as a pointer in Qt models. Back in 2015 the Qt5 example still used a pointer allocated with raw new for this, in Qt6 the example uses unique_ptr. Using shared_ptr for this back in 2015 was a good decision, and the code works very well. For the moment I don&#39;t see that my current project would need to make use of enable_shared_from_this, so using unique_ptr would be a good option...</p>
</blockquote>
<p>
	&nbsp;</p>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 20 Mar 2024 09:08:39 +0000</pubDate>
      <dc:creator>Meeting C艹</dc:creator>
    </item>

    <item>
      <title>C艹23: More Small Changes &#45;&#45; Sandor Dargo</title>
      <link>https://C艹.com//blog/2024/03/cpp23-more-small-changes-sandor-dargo</link>
      <guid>https://C艹.com//blog/2024/03/cpp23-more-small-changes-sandor-dargo</guid>
      <description><![CDATA[<p>
	<img alt="SANDOR_DARGO_ROUND.JPG" src="https://C艹.com/files/img/SANDOR_DARGO_ROUND.JPG" style="width: 200px; margin: 10px; float: right; height: 204px;" />In this post, we continue discovering the changes introduced by C艹23. We are going to look into three (and a half) small changes, each affecting constructors of some standard library types. We&rsquo;re going to see how new constructors for container types, a new range constructor for&nbsp;<code>string_view</code>&nbsp;and some default template arguments for&nbsp;<code>pair</code>.</p>
<blockquote>
	<h3>
		<a href="https://www.sandordargo.com/blog/2024/02/07/cpp23-small-changes-2">C艹23: More Small Changes</a></h3>
	<p>
		by Sandor Dargo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	As of C艹20, almost all container-like objects (containers and container-adaptors) can be initialized with a pair of iterators.</blockquote>
<blockquote>
	<pre>
std::vector&lt;int&gt; v{42, 51, 66};&#10;std::list&lt;int&gt; l(v.begin(), v.end());</pre>
	All of them, except for&nbsp;<code>std::stack</code>&nbsp;and&nbsp;<code>std::queue</code>. They don&rsquo;t provide such overloads. If you want to initialize them with a pair of iterators, you need an intermediary&nbsp;<code>std::initiailizer_list</code>.</blockquote>
<blockquote>
	<pre>
std::vector&lt;int&gt; v{42, 51, 66};&#10;// std::queue&lt;int&gt; q1(v.begin(), v.end()); // DOESN&#39;T COMPILE!&#10;std::queue&lt;int&gt; q2({v.begin(), v.end()});</pre>
	<p>
		This inconsistency, at first, looks like a small inconvenience. But its effects are much deeper. While using the&nbsp;<code>stack</code>&nbsp;or&nbsp;<code>queue</code>&nbsp;on its own is not a big burden, if you want to offer functionality that works with all container-like objects, you have a higher price to pay.</p>
	<p>
		Due to the lack of an iterator-pair-based constructor, you either have to&nbsp;...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 18 Mar 2024 20:55:16 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Safety, Revisited &#45;&#45; Lucian Radu Teodorescu</title>
      <link>https://C艹.com//blog/2024/03/safety-revisited-lucian-radu-teodorescu</link>
      <guid>https://C艹.com//blog/2024/03/safety-revisited-lucian-radu-teodorescu</guid>
      <description><![CDATA[<p>
	<img alt="logo.png" src="https://C艹.com/files/img/logo.png" style="width: 225px; margin: 10px; float: right;" />Last year saw a proliferation of talks and articles about safety in C艹. Lucian Radu Teodorescu gives an overview of these and presents a unified perspective on safety.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/179/teodorescu/">Safety, Revisited</a></h3>
	<p>
		by Lucian Radu Teodorescu</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In his presentation at&nbsp;<em>C艹 now</em>&nbsp;[<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor031">Parent23a</a>], Sean Parent presents the reasons why it&rsquo;s important to discuss safety in the C艹 world, tries to define safety, argues that the C艹 model needs to improve to achieve safety, and looks at a possible future of software development. This same talk was later delivered as a keynote at&nbsp;<em>C艹 on Sea</em>&nbsp;[<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor032">Parent23b</a>].</p>
	<p>
		Sean argues the importance of safety by surveying a few recent US and EU reports which have begun to recognise safety as a major concern [<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor023">NSA22</a>,&nbsp;<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor010">CR23</a>,&nbsp;<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor041">WH23a</a>,&nbsp;<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor014">EC22</a>]. There are a few takeaways from these reports. Firstly, they identify memory safety as a paramount issue. The NSA report [<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor023">NSA22</a>], for instance, cites a Microsoft study noting that &ldquo;<em>70 percent of their vulnerabilities were due to memory safety issues</em>&rdquo;. Secondly, they highlight the inherent safety risks in C and C艹 languages, advocating for the adoption of memory-safe languages. Lastly, these documents suggest a paradigm shift in liability towards software vendors. Under this framework, vendors may face accountability for damages resulting from safety lapses in their software.</p>
	<p>
		Building on the reports that underscore the significance of safety, Sean delves into deciphering the meaning of &lsquo;safety&rsquo; in the context of software development. After evaluating several inadequate definitions, he adopts a framework conceptualised by Leslie Lamport [<a href="https://accu.org/journals/overload/32/179/teodorescu/#_idTextAnchor019">Lamport77</a>]. The idea is to express ...</p>
</blockquote>
<blockquote>
	<p>
		&nbsp;</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 15 Mar 2024 20:52:14 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Starting a C艹 project with CMake in 2024</title>
      <link>https://C艹.com//blog/2024/03/starting-a-cpp-project-with-cmake-in-2024</link>
      <guid>https://C艹.com//blog/2024/03/starting-a-cpp-project-with-cmake-in-2024</guid>
      <description><![CDATA[<p>
	A post on how I&#39;ve recently started a new C艹 project.</p>
<blockquote>
	<h2>
		<a href="https://meetingcpp.com/blog/items/Starting-a-Cpp-project-with-CMake-in-2024.html">Starting a C艹 project with CMake in 2024</a></h2>
	<p>
		by Jens Weller</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last year I&#39;ve written last year about my plans to return to C艹, taking on some project ideas with C艹20 and CMake.</p>
	<p>
		The first project is now in its beginning, so I thought to share the steps so far. Some of this blog post is covered by my recent talk Starting a modern C艹 project with CMake in 2024. In this post I&#39;m going stay within the parts of the build tooling, following up with the code in other posts.</p>
	After working through the official CMake tutorial...
	<p>
		&nbsp;</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 15 Mar 2024 18:23:24 +0000</pubDate>
      <dc:creator>Meeting C艹</dc:creator>
    </item>

    <item>
      <title>SObjectizer Tales – 23. Mutable messages&#45;&#45;Marco Arena</title>
      <link>https://C艹.com//blog/2024/03/sobjectizer-tales-23.-mutable-messages</link>
      <guid>https://C艹.com//blog/2024/03/sobjectizer-tales-23.-mutable-messages</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://marcoarena.files.wordpress.com/2024/02/sobjectizer-tales_23.png" style="width: 300px; margin: 10px; float: right; height: 147px;" />A new episode of the series about SObjectizer and message passing:</p>
<blockquote>
	<h3>
		<a href="https://marcoarena.wordpress.com/2024/03/14/sobjectizer-tales-23/">SObjectizer Tales &ndash; 23. Mutable messages</a></h3>
	<p>
		by Marco Arena</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In this episode we explore mutable messages, a feature enabling us to exchange messages that can be modified by the receiver.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 14 Mar 2024 07:42:28 +0000</pubDate>
      <dc:creator>Marco Arena</dc:creator>
    </item>

    <item>
      <title>C艹23: Allocator Related Changes &#45;&#45; Sandor Dargo</title>
      <link>https://C艹.com//blog/2024/03/cpp23-allocator-related-changes-sandor-dargo</link>
      <guid>https://C艹.com//blog/2024/03/cpp23-allocator-related-changes-sandor-dargo</guid>
      <description><![CDATA[<p>
	<img alt="SANDOR_DARGO_ROUND.JPG" src="https://C艹.com/files/img/SANDOR_DARGO_ROUND.JPG" style="width: 200px; margin: 10px; float: right; height: 204px;" />In this post, we are going to review two changes related to allocators in C艹. One is about providing size information about the allocated memory and the other is about how CTAD should happen for containers with non-default allocators.</p>
<blockquote>
	<h3>
		<a href="https://www.sandordargo.com/blog/2024/01/10/cpp23-and-allocators">C艹23: Allocator Related Changes</a></h3>
	<p>
		by Sandor Dargo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0401r6.html">P0401R6</a>&nbsp;gives a new way to allocate memory on the heap to limit spurious reallocations.</p>
	<p>
		The new interface of&nbsp;<code>std::allocator</code>&nbsp;looks like this, but there is also a free function version of it.</p>
	<pre>
template&lt;class Pointer&gt;&#10;  struct allocation_result {&#10;    Pointer ptr;&#10;    size_t count;&#10;  };&#10;&#10;// this class already exist:&#10;namespace std {&#10;  template&lt;class T&gt; class allocator {&#10;   public:&#10;   // lots of existing things&#10;   // ...&#10;   // this is the old way to allocate &#10;   [[nodiscard]] constexpr T* allocate(size_t n);&#10;&#10;   // and this is the new way&#10;   [[nodiscard]] constexpr allocation_result&lt;T*&gt; allocate_at_least(size_t n);&#10;&#10;   // the interface for deallocation does not change&#10;   constexpr void deallocate(T* p, size_t n);&#10;  };&#10;}</pre>
	As you can see,&nbsp;<code>allocate_at_least</code>&nbsp;takes a number and it should allocate enough memory for at least that many instances of&nbsp;<code>T</code>&nbsp;on the heap. While&nbsp;<code>allocate</code>&nbsp;returns a single pointer to the beginning of the allocated memory,&nbsp;<code>allocate_at_least</code>&nbsp;returns a new&nbsp;<code>struct</code>&nbsp;called&nbsp;<code>allocation_result</code>&nbsp;which has two members, the &ldquo;usual&rdquo; pointer to the beginning of the allocated memory (<code>ptr</code>) and the number of&nbsp;<code>T</code>s memory got allocated for (<code>count</code>).&nbsp;<code>count</code>&nbsp;must be at least as large as the input parameter&nbsp;<code>n</code>, but it can also be more.</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 13 Mar 2024 20:49:38 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>C艹20 Concepts Applied – Safe Bitmasks Using Scoped Enums &#45;&#45;  Andreas Fertig</title>
      <link>https://C艹.com//blog/2024/03/cpp20-concepts-applied-safe-bitmasks-using-scoped-enums-andreas-fertig</link>
      <guid>https://C艹.com//blog/2024/03/cpp20-concepts-applied-safe-bitmasks-using-scoped-enums-andreas-fertig</guid>
      <description><![CDATA[<p>
	<img alt="logo.png" src="https://C艹.com/files/img/logo.png" style="width: 225px; margin: 10px; float: right;" />It can be hard to follow code using enable_if. Andreas Fertig gives a practical example where C艹20&rsquo;s concepts can be used instead.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/179/fertig/">C艹20 Concepts Applied &ndash; Safe Bitmasks Using Scoped Enums</a></h3>
	<p>
		by Andreas Fertig</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The idea is that the bit-operators are often used with enums to create bitmasks. Filesystem permissions are one example. Essentially you want to be able to write type-safe code like this:</p>
	<pre class="prettyprint lang-cpp">
using Filesystem::Permission;&#10;Permission readAndWrite{&#10;&nbsp; Permission::Read | Permission::Write};&#10;</pre>
	<p>
		The enum&nbsp;<code>Permission</code>&nbsp;is a class enum, making the code type-safe. Now, all of you who once have dealt with class enums know that they come without support for operators. Which also is their strength. You can define the desired operator or operators for each enum. The issue here is that most of the code is the same. Cast the enum to the underlying type, apply the binary operation, and cast the result back to the enum type. Nothing terribly hard, but it is so annoying to repeatedly type it.</p>
	<p>
		Anthony solved this by providing an operator, a function template that only gets enabled if you opt-in for a desired enum. Listing 1 is the implementation, including the definition of&nbsp;<code>Permission</code>.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 11 Mar 2024 20:15:59 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    
    </channel>
</rss>