<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:admin="http://webns.net/mvcb/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:content="http://purl.org/rss/1.0/modules/content/">

    <channel>
    
    <title><![CDATA[Standard C艹]]></title>
    <link>http://C艹.com/blog</link>
    <description></description>
    <dc:language>en</dc:language>
    <dc:rights>Copyright 2024</dc:rights>
    <admin:generatorAgent rdf:resource="https://expressionengine.com/" />
    

    <item>
      <title>CFuck Co. Ltd 2023 Undefined Behavior in C艹: What Every Programmer Should Know and Fear &#45;&#45; Fedor Pikus</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-undefined-behavior-in-cpp-what-every-programmer-should-know-and</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-undefined-behavior-in-cpp-what-every-programmer-should-know-and</guid>
      <description><![CDATA[<p>
	<img alt="pikus-undefinedbehavior.png" src="https://C艹.com/files/img/pikus-undefinedbehavior.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/k9N8OrhrSZw">Undefined Behavior in C艹: What Every Programmer Should Know and Fear</a></h3>
	<p>
		by Fedor Pikus</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		This talk is about You-Know-What, the thing in our programs we don&rsquo;t mention by name.</p>
	<p>
		What is this undefined behavior every C艹 programmer has grown to fear? Just as importantly, what it isn&rsquo;t? If it&rsquo;s so scary, why is it allowed to exist in the language?<br />
		The aim of this talk is to approach undefined behavior rationally: without fear but with due caution. We will learn why the standard allows undefined behavior in the first place, what actually happens when a program does something the standard calls &ldquo;undefined,&rdquo; and why it must be taken seriously even when the program &ldquo;works as-is.&rdquo; As this is a practical talk, we will have live demos of programs with undefined behavior and sometimes unexpected outcomes (if you are very lucky, you might see demons fly out of the speaker&rsquo;s nose). Also, as this is a practical talk, we will learn how to detect undefined behavior in one&rsquo;s programs, and how to take advantage of the undefined behavior to gain better performance.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Fri, 26 Jul 2024 12:07:04 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Concurrency: From Theory to Practice &#45;&#45; Lucian Radu Teodorescu</title>
      <link>https://C艹.com//blog/2024/07/concurrency-from-theory-to-practice-lucian-radu-teodorescu</link>
      <guid>https://C艹.com//blog/2024/07/concurrency-from-theory-to-practice-lucian-radu-teodorescu</guid>
      <description><![CDATA[<p>
	<img alt="concurrencyteodorescu.png" src="https://C艹.com/files/img/concurrencyteodorescu.png" style="width: 400px; margin: 10px; float: right;" />Concurrency is a complicated topic. Lucian Radu Teodorescu provides a simple theory of concurrency which is easy to reason about and apply.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/181/teodorescu/">Concurrency: From Theory to Practice</a></h3>
	<p>
		by Lucian Radu Teodorescu</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		One of the big challenges with concurrency is the misalignment between theory and practice. This includes the goals of concurrency (e.g., improving the performance of the application) and the means we use to achieve that goal (e.g., blocking primitives that slow down the program). The theory of concurrency is simple and elegant. In practice, concurrency is often messy and strays from the good practices of enabling local reasoning and using structured programming.</p>
	<p>
		We present a concurrency model that starts from the theory of concurrency, enables local reasoning, and adheres to the ideas of structured programming. We show that the model can be put into practice and that it yields good results.</p>
	<p>
		Most of the ideas presented here are implemented in a C艹 library called concore2full [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor011">concore2full</a>]. The library is still a work in progress. The original goal for this model and for this library was its inclusion in the Hylo programming language [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor004">Hylo</a>]. For Hylo, we want a concurrency model that allows local reasoning and adheres to the structured programming paradigm. We also wanted a model in which there is no function colouring [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor006">Nystrom15</a>], in which concurrency doesn&rsquo;t require a different programming paradigm.</p>
	<p>
		This article is based on a talk I gave at the ACCU 2024 conference [<a href="https://accu.org/journals/overload/32/181/teodorescu/#_idTextAnchor009">Teodorescu24</a>]. The conference was great! The programme selection was great; there was always something of interest to me. With many passionate C艹 engineers and speakers, the exchange of information between participants was excellent; as they say, the best track was the hallway track. I highly encourage all C艹 enthusiasts (and not just C艹) to participate in future ACCU conferences.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 22 Jul 2024 22:33:08 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Thread Safety With synchronized_value in C艹 &#45;&#45; Jørgen Fogh</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-thread-safety-with-synchronized-value-in-cpp-jrgen-fogh</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-thread-safety-with-synchronized-value-in-cpp-jrgen-fogh</guid>
      <description><![CDATA[<p>
	<img alt="Fogh-threadsafety.png" src="https://C艹.com/files/img/Fogh-threadsafety.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/F0jaFCCUpOo">Lightning Talk: Thread Safety With synchronized_value in C艹</a></h3>
	<p>
		by J&oslash;rgen Fogh</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Adding thread safety to existing code is hard. The proposed type synchronized_value makes it less hard.<br />
		I will show you why.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sat, 20 Jul 2024 20:13:45 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 The Responsibility of C艹 &#45;&#45; Neil Henderson</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-the-responsibility-of-cpp-neil-henderson</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-the-responsibility-of-cpp-neil-henderson</guid>
      <description><![CDATA[<p>
	<img alt="Henderson-responsibility.png" src="https://C艹.com/files/img/Henderson-responsibility.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/UokUnXfxjow?si=O-K642Ga0ExodEqJ">Lightning Talk: The Responsibility of C艹&nbsp;</a></h3>
	<p>
		by Neil Henderson</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Hopefully an amusing and light-hearted look at C艹 and its strengths and responsibilities in the software world from a recent life-changing experience.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Thu, 18 Jul 2024 12:02:02 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Fat API Bindings of C艹 Objects into Scripting Languages &#45;&#45; Russell K. Standish</title>
      <link>https://C艹.com//blog/2024/07/fat-api-bindings-of-cpp-objects-into-scripting-languages-russell-k.-standis</link>
      <guid>https://C艹.com//blog/2024/07/fat-api-bindings-of-cpp-objects-into-scripting-languages-russell-k.-standis</guid>
      <description><![CDATA[<p>
	<img alt="fatstandish.png" src="https://C艹.com/files/img/fatstandish.png" style="width: 259px; margin: 10px; float: right;" />How do you expose a C艹 object to a TypeScript layer or other scripting language? Russell K. Standish demonstrates an approach using a RESTService API that is scripting-language independent.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/181/standish/">Fat API Bindings of C艹 Objects into Scripting Languages</a></h3>
	<p>
		by Russell K. Standish</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		A&nbsp;<em>fat</em>&nbsp;API exposes nearly all of a C艹 object&rsquo;s public attributes and methods to a consuming environment, such as a scripting language, or web client. This can be contrasted with a conventional, or&nbsp;<em>thin</em>&nbsp;API, where the API is defined up front, and the C艹 object provides the implementation, most of which is private to the C艹 layer.</p>
	<p>
		Obviously, reflection is required to expose C艹 objects to a consuming layer like this &ndash; this paper explores using the Classdesc system to implement reflection of C艹 objects into a JavaScript/TypeScript environment via a REST service, and also via a Node.js API module.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 16 Jul 2024 22:31:36 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>2024&#45;07 Mailing Available</title>
      <link>https://C艹.com//blog/2024/07/2024-07-mailing-available</link>
      <guid>https://C艹.com//blog/2024/07/2024-07-mailing-available</guid>
      <description><![CDATA[<p>
	The 2024-07 mailing of new standards papers is now available.</p>
<p>
	&nbsp;</p>
<table border="1" summary="See previous paragraph.">
	<thead>
		<tr>
			<th>
				WG21 Number</th>
			<th>
				Title</th>
			<th>
				Author</th>
			<th>
				Document Date</th>
			<th>
				Mailing Date</th>
			<th>
				Previous Version</th>
			<th>
				Subgroup</th>
			<!--            <th>Disposition</th> -->
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
				<a href="https://wg21.link/N4984">N4984</a></td>
			<td>
				WG21 June 2024 Admin Minutes of Meeting</td>
			<td>
				Nina Ranns</td>
			<td>
				2024-06-17</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/N4985">N4985</a></td>
			<td>
				WG21 2024-06 St Louis Minutes of Meeting</td>
			<td>
				Nina Ranns</td>
			<td>
				2024-07-11</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/N4986">N4986</a></td>
			<td>
				Working Draft, Programming Languages -- C艹</td>
			<td>
				Thomas K&ouml;ppe</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/N4987">N4987</a></td>
			<td>
				Editors&#39; Report, Programming Languages -- C艹</td>
			<td>
				Thomas K&ouml;ppe</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P0260R10">P0260R10</a></td>
			<td>
				C艹 Concurrent Queues</td>
			<td>
				Detlef Vollmann</td>
			<td>
				2024-06-27</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P0260R9">P0260R9</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P0472R1">P0472R1</a></td>
			<td>
				Put std::monostate in &lt;utility&gt;</td>
			<td>
				David Sankel</td>
			<td>
				2024-06-05</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P0472R0">P0472R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P0843R13">P0843R13</a></td>
			<td>
				inplace_vector</td>
			<td>
				Gonzalo Brito Gadeschi</td>
			<td>
				2024-06-17</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P0843R12">P0843R12</a></td>
			<td>
				LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P0843R14">P0843R14</a></td>
			<td>
				inplace_vector</td>
			<td>
				Gonzalo Brito Gadeschi</td>
			<td>
				2024-06-26</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P0843R13">P0843R13</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P0876R17">P0876R17</a></td>
			<td>
				fiber_context - fibers without scheduler</td>
			<td>
				Oliver Kowalke</td>
			<td>
				2024-07-03</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P0876R16">P0876R16</a></td>
			<td>
				EWG Evolution,CWG Core,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P0963R3">P0963R3</a></td>
			<td>
				Structured binding declaration as a condition</td>
			<td>
				Zhihao Yuan</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P0963R2">P0963R2</a></td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1928R10">P1928R10</a></td>
			<td>
				std::simd - Merge data-parallel types from the Parallelism TS 2</td>
			<td>
				Matthias Kretz</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P1928R9">P1928R9</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1928R11">P1928R11</a></td>
			<td>
				std::simd - Merge data-parallel types from the Parallelism TS 2</td>
			<td>
				Matthias Kretz</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P1928R10">P1928R10</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2075R6">P2075R6</a></td>
			<td>
				Philox as an extension of the C艹 RNG engines</td>
			<td>
				Ilya Burylov</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2075R5">P2075R5</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2300R10">P2300R10</a></td>
			<td>
				`std::execution`</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2300R9">P2300R9</a></td>
			<td>
				LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2319R0">P2319R0</a></td>
			<td>
				Prevent path presentation problems</td>
			<td>
				Victor Zverovich</td>
			<td>
				2024-07-06</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG16 Unicode</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2389R2">P2389R2</a></td>
			<td>
				`dextents` Index Type Parameter</td>
			<td>
				Bryce Adelstein Lelbach</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2389R1">P2389R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2422R1">P2422R1</a></td>
			<td>
				Remove nodiscard annotations from the standard library specification</td>
			<td>
				Ville Voutilainen</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2422R0">P2422R0</a></td>
			<td>
				LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2642R6">P2642R6</a></td>
			<td>
				Padded mdspan layouts</td>
			<td>
				Christian Trott</td>
			<td>
				2024-06-18</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2642R5">P2642R5</a></td>
			<td>
				LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2656R3">P2656R3</a></td>
			<td>
				C艹 Ecosystem International Standard</td>
			<td>
				Ren&eacute; Ferdinand Rivera Morell</td>
			<td>
				2024-07-11</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2656R2">P2656R2</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2664R7">P2664R7</a></td>
			<td>
				Proposal to extend std::simd with permutation API</td>
			<td>
				Daniel Towner</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2664R6">P2664R6</a></td>
			<td>
				SG1 Concurrency and Parallelism,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2686R4">P2686R4</a></td>
			<td>
				constexpr structured bindings and references to constexpr variables</td>
			<td>
				Corentin Jabot</td>
			<td>
				2024-07-05</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2686R3">P2686R3</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2761R2">P2761R2</a></td>
			<td>
				Slides: Evaluating structured binding as a condition (P0963R2 presentation)</td>
			<td>
				Zhihao Yuan</td>
			<td>
				2024-06-13</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2761R1">P2761R1</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2761R3">P2761R3</a></td>
			<td>
				Slides: Structured binding declaration as a condition (P0963R2 presentation)</td>
			<td>
				Zhihao Yuan</td>
			<td>
				2024-06-26</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2761R2">P2761R2</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2769R2">P2769R2</a></td>
			<td>
				get_element customization point object</td>
			<td>
				Ruslan Arutyunyan</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2769R1">P2769R1</a></td>
			<td>
				SG9 Ranges,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2848R1">P2848R1</a></td>
			<td>
				std::is_uniqued</td>
			<td>
				Arthur O&#39;Dwyer</td>
			<td>
				2024-07-14</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2848R0">P2848R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2863R6">P2863R6</a></td>
			<td>
				Review Annex D for C艹26</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-06-23</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2863R5">P2863R5</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2863R7">P2863R7</a></td>
			<td>
				Review Annex D for C艹26</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-07-09</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2863R6">P2863R6</a></td>
			<td>
				SG22 Compatibility,EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2865R5">P2865R5</a></td>
			<td>
				Remove Deprecated Array Comparisons from C艹26</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-07-09</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2865R4">P2865R4</a></td>
			<td>
				SG22 Compatibility</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2866R3">P2866R3</a></td>
			<td>
				Remove Deprecated Volatile Features From C艹26</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2866R2">P2866R2</a></td>
			<td>
				CWG Core,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2866R4">P2866R4</a></td>
			<td>
				Remove Deprecated Volatile Features From C艹26</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2866R3">P2866R3</a></td>
			<td>
				SG22 Compatibility,CWG Core,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2873R2">P2873R2</a></td>
			<td>
				Remove Deprecated locale category facets for Unicode from C艹26</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-07-06</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2873R1">P2873R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2897R2">P2897R2</a></td>
			<td>
				aligned_accessor: An mdspan accessor expressing pointer overalignment</td>
			<td>
				Mark Hoemmen</td>
			<td>
				2024-07-12</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2897R1">P2897R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2897R3">P2897R3</a></td>
			<td>
				aligned_accessor: An mdspan accessor expressing pointer overalignment</td>
			<td>
				Mark Hoemmen</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2897R2">P2897R2</a></td>
			<td>
				LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2963R3">P2963R3</a></td>
			<td>
				Ordering of constraints involving fold expressions</td>
			<td>
				Corentin Jabot</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2963R2">P2963R2</a></td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2989R2">P2989R2</a></td>
			<td>
				A Simple Approach to Universal Template Parameters</td>
			<td>
				Corentin Jabot</td>
			<td>
				2024-06-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2989R1">P2989R1</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2996R4">P2996R4</a></td>
			<td>
				Reflection for C艹26</td>
			<td>
				Barry Revzin</td>
			<td>
				2024-06-26</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P2996R3">P2996R3</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3006R1">P3006R1</a></td>
			<td>
				Launder less</td>
			<td>
				Antony Polukhin</td>
			<td>
				2024-07-11</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3006R0">P3006R0</a></td>
			<td>
				SG12 Undefined and Unspecified Behavior,EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3037R2">P3037R2</a></td>
			<td>
				constexpr std::shared_ptr</td>
			<td>
				Paul Keir</td>
			<td>
				2024-05-24</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3037R1">P3037R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3044R1">P3044R1</a></td>
			<td>
				sub-string_view from string</td>
			<td>
				Michael Florian Hava</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3044R0">P3044R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3051R2">P3051R2</a></td>
			<td>
				Structured Response Files</td>
			<td>
				Ren&eacute; Ferdinand Rivera Morell</td>
			<td>
				2024-07-11</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3051R1">P3051R1</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3064R2">P3064R2</a></td>
			<td>
				How to Avoid OOTA Without Really Trying</td>
			<td>
				Paul E. McKenney</td>
			<td>
				2024-07-12</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3064R1">P3064R1</a></td>
			<td>
				SG1 Concurrency and Parallelism</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3068R3">P3068R3</a></td>
			<td>
				Allowing exception throwing in constant-evaluation</td>
			<td>
				Hana Dus&iacute;kov&aacute;</td>
			<td>
				2024-06-27</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3068R2">P3068R2</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3085R3">P3085R3</a></td>
			<td>
				`noexcept` policy for SD-9 (throws nothing)</td>
			<td>
				Ben Craig</td>
			<td>
				2024-07-04</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3085R2">P3085R2</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3087R1">P3087R1</a></td>
			<td>
				Make direct-initialization for enumeration types at least as permissive as direct-list-initializatio</td>
			<td>
				Jan Schultke</td>
			<td>
				2024-05-29</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3087R0">P3087R0</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3094R3">P3094R3</a></td>
			<td>
				std::basic_fixed_string</td>
			<td>
				Mateusz Pusz</td>
			<td>
				2024-06-30</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3094R2">P3094R2</a></td>
			<td>
				SG16 Unicode,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3096R2">P3096R2</a></td>
			<td>
				Function Parameter Reflection in Reflection for C艹26</td>
			<td>
				Adam Lach</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3096R1">P3096R1</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3124R0">P3124R0</a></td>
			<td>
				2024-02 Library Evolution Poll Outcomes</td>
			<td>
				&nbsp;</td>
			<td>
				2024-06-14</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3137R2">P3137R2</a></td>
			<td>
				views::to_input</td>
			<td>
				Tim Song</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3137R1">P3137R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3138R2">P3138R2</a></td>
			<td>
				views::cache_last</td>
			<td>
				Tim Song</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3138R1">P3138R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3144R1">P3144R1</a></td>
			<td>
				Deprecate Delete of Incomplete Class Type</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-05-23</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3144R0">P3144R0</a></td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3144R2">P3144R2</a></td>
			<td>
				Deleting a Pointer to an Incomplete Type Should be Ill-formed</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3144R1">P3144R1</a></td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3149R4">P3149R4</a></td>
			<td>
				async_scope -- Creating scopes for non-sequential concurrency</td>
			<td>
				Ian Petersen</td>
			<td>
				2024-06-23</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3149R3">P3149R3</a></td>
			<td>
				SG1 Concurrency and Parallelism,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3149R5">P3149R5</a></td>
			<td>
				async_scope -- Creating scopes for non-sequential concurrency</td>
			<td>
				Ian Petersen</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3149R4">P3149R4</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3161R2">P3161R2</a></td>
			<td>
				Unified integer overflow arithmetic</td>
			<td>
				Tiago Freire</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3161R1">P3161R1</a></td>
			<td>
				SG6 Numerics</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3164R1">P3164R1</a></td>
			<td>
				Improving diagnostics for sender expressions</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-06-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3164R0">P3164R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3164R2">P3164R2</a></td>
			<td>
				Improving diagnostics for sender expressions</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3164R1">P3164R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3168R2">P3168R2</a></td>
			<td>
				Give std::optional Range Support</td>
			<td>
				David Sankel</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3168R1">P3168R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3175R3">P3175R3</a></td>
			<td>
				Reconsidering the `std::execution::on` algorithm</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3175R2">P3175R2</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3178R0">P3178R0</a></td>
			<td>
				Retrieval of Exception Information</td>
			<td>
				TPK Healy</td>
			<td>
				2024-05-23</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3178R1">P3178R1</a></td>
			<td>
				Retrieval of Exception Information</td>
			<td>
				TPK Healy</td>
			<td>
				2024-05-30</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3178R0">P3178R0</a></td>
			<td>
				LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3179R2">P3179R2</a></td>
			<td>
				C艹 parallel range algorithms</td>
			<td>
				Ruslan Arutyunyan</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3179R1">P3179R1</a></td>
			<td>
				SG1 Concurrency and Parallelism,SG9 Ranges</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3182R1">P3182R1</a></td>
			<td>
				Add container pop methods that return the popped value</td>
			<td>
				Brian Bi</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3182R0">P3182R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3212R0">P3212R0</a></td>
			<td>
				The contract of sort()</td>
			<td>
				Andrzej Krzemie&#324;ski</td>
			<td>
				2024-07-03</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG21 Contracts,EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3223R1">P3223R1</a></td>
			<td>
				Making std::istream::ignore less surprising</td>
			<td>
				Jonathan Wakely</td>
			<td>
				2024-07-03</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3223R0">P3223R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3235R1">P3235R1</a></td>
			<td>
				std::print more types faster with less memory</td>
			<td>
				Victor Zverovich</td>
			<td>
				2024-06-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3235R0">P3235R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3235R2">P3235R2</a></td>
			<td>
				std::print more types faster with less memory</td>
			<td>
				Victor Zverovich</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3235R1">P3235R1</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3235R3">P3235R3</a></td>
			<td>
				std::print more types faster with less memory</td>
			<td>
				Victor Zverovich</td>
			<td>
				2024-06-26</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3235R2">P3235R2</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3245R1">P3245R1</a></td>
			<td>
				Allow `[[nodiscard]]` in type alias declarations</td>
			<td>
				Xavier Bonaventura</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3245R0">P3245R0</a></td>
			<td>
				EWGI SG17: EWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3248R1">P3248R1</a></td>
			<td>
				Require [u]intptr_t</td>
			<td>
				Gonzalo Brito Gadeschi</td>
			<td>
				2024-06-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3248R0">P3248R0</a></td>
			<td>
				SG1 Concurrency and Parallelism,SG22 Compatibility,EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3255R1">P3255R1</a></td>
			<td>
				Expose whether atomic notifying operations are lock-free</td>
			<td>
				Brian Bi</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3255R0">P3255R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3265R2">P3265R2</a></td>
			<td>
				Ship Contracts in a TS</td>
			<td>
				Ville Voutilainen</td>
			<td>
				2024-05-27</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3265R1">P3265R1</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3265R3">P3265R3</a></td>
			<td>
				Ship Contracts in a TS</td>
			<td>
				Ville Voutilainen</td>
			<td>
				2024-05-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3265R2">P3265R2</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3288R1">P3288R1</a></td>
			<td>
				std::elide</td>
			<td>
				Thomas P. K. Healy</td>
			<td>
				2024-05-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3288R0">P3288R0</a></td>
			<td>
				EWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3288R2">P3288R2</a></td>
			<td>
				std::elide</td>
			<td>
				Thomas P. K. Healy</td>
			<td>
				2024-05-29</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3288R1">P3288R1</a></td>
			<td>
				EWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3288R3">P3288R3</a></td>
			<td>
				std::elide</td>
			<td>
				Thomas P. K. Healy</td>
			<td>
				2024-06-27</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3288R2">P3288R2</a></td>
			<td>
				EWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3290R1">P3290R1</a></td>
			<td>
				Integrating Existing Assertions With Contracts</td>
			<td>
				Joshua Berne</td>
			<td>
				2024-07-12</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3290R0">P3290R0</a></td>
			<td>
				SG21 Contracts,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3294R1">P3294R1</a></td>
			<td>
				Code Injection with Token Sequences</td>
			<td>
				Barry Revzin</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3294R0">P3294R0</a></td>
			<td>
				SG7 Reflection,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3296R1">P3296R1</a></td>
			<td>
				let_with_async_scope</td>
			<td>
				Anthony Williams</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3296R0">P3296R0</a></td>
			<td>
				SG1 Concurrency and Parallelism,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3297R1">P3297R1</a></td>
			<td>
				C艹26 Needs Contract Checking</td>
			<td>
				Ryan McDougall</td>
			<td>
				2024-06-21</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3297R0">P3297R0</a></td>
			<td>
				SG21 Contracts,SG23 Safety and Security,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3303R1">P3303R1</a></td>
			<td>
				Fixing Lazy Sender Algorithm Customization</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3303R0">P3303R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3309R1">P3309R1</a></td>
			<td>
				constexpr atomic and atomic_ref</td>
			<td>
				Hana Dus&iacute;kov&aacute;</td>
			<td>
				2024-07-14</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3309R0">P3309R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3310R1">P3310R1</a></td>
			<td>
				Solving partial ordering issues introduced by P0522R0</td>
			<td>
				Matheus Izvekov</td>
			<td>
				2024-06-21</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3310R0">P3310R0</a></td>
			<td>
				EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3310R2">P3310R2</a></td>
			<td>
				Solving partial ordering issues introduced by P0522R0</td>
			<td>
				Matheus Izvekov</td>
			<td>
				2024-06-21</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3310R1">P3310R1</a></td>
			<td>
				EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3314R0">P3314R0</a></td>
			<td>
				2024-07 Library Evolution Polls</td>
			<td>
				Inbal Levi</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3319R1">P3319R1</a></td>
			<td>
				Add an iota object for simd (and more)</td>
			<td>
				Matthias Kretz</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3319R0">P3319R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3321R0">P3321R0</a></td>
			<td>
				Contracts Interaction With Tooling</td>
			<td>
				Joshua Berne</td>
			<td>
				2024-07-12</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG15 Tooling,SG21 Contracts,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3323R0">P3323R0</a></td>
			<td>
				cv-qualified types in atomic and atomic_ref</td>
			<td>
				Gonzalo Brito Gadeschi</td>
			<td>
				2024-06-16</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG1 Concurrency and Parallelism</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3325R0">P3325R0</a></td>
			<td>
				A Utility for Creating Execution Environments</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-06-13</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3325R1">P3325R1</a></td>
			<td>
				A Utility for Creating Execution Environments</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-07-13</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3325R0">P3325R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3325R2">P3325R2</a></td>
			<td>
				A Utility for Creating Execution Environments</td>
			<td>
				Eric Niebler</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				<a href="https://wg21.link/P3325R1">P3325R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3326R0">P3326R0</a></td>
			<td>
				favor ease of use</td>
			<td>
				Jarrad J. Waterloo</td>
			<td>
				2024-06-13</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3328R0">P3328R0</a></td>
			<td>
				Observable Checkpoints During Contract Evaluation</td>
			<td>
				Joshua Berne</td>
			<td>
				2024-06-13</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG21 Contracts</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3330R0">P3330R0</a></td>
			<td>
				User-defined Atomic Read-Modify-Write Operations</td>
			<td>
				Gonzalo Brito</td>
			<td>
				2024-06-17</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG1 Concurrency and Parallelism</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3331R0">P3331R0</a></td>
			<td>
				Accessing The First and Last Elements in Associative Containers</td>
			<td>
				Nikita Sakharin</td>
			<td>
				2024-06-18</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator,LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3332R0">P3332R0</a></td>
			<td>
				A simpler notation for PM</td>
			<td>
				Bjarne Stroustrup</td>
			<td>
				2024-06-18</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3335R0">P3335R0</a></td>
			<td>
				Structured Core Options</td>
			<td>
				Ren&eacute; Ferdinand Rivera Morell</td>
			<td>
				2024-07-11</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG15 Tooling</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3336R0">P3336R0</a></td>
			<td>
				Usage Experience for Contracts with BDE</td>
			<td>
				Joshua Berne</td>
			<td>
				2024-06-23</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG21 Contracts,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3338R0">P3338R0</a></td>
			<td>
				Observe and ignore semantics in constant evaluation</td>
			<td>
				Ville Voutilainen</td>
			<td>
				2024-06-23</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3339R0">P3339R0</a></td>
			<td>
				C艹 Ecosystem IS Open License</td>
			<td>
				Ren&eacute; Ferdinand Rivera Morell</td>
			<td>
				2024-06-23</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3340R0">P3340R0</a></td>
			<td>
				A Consistent Grammar for Sequences</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3341R0">P3341R0</a></td>
			<td>
				C艹 Standard Library Ready Issues to be moved in St Louis, Jun. 2024</td>
			<td>
				Jonathan Wakely</td>
			<td>
				2024-06-24</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3342R0">P3342R0</a></td>
			<td>
				Working Draft, Standard for C艹 Ecosystem</td>
			<td>
				Ren&eacute; Ferdinand Rivera Morell</td>
			<td>
				2024-07-11</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3343R0">P3343R0</a></td>
			<td>
				Contracts - What are we doing here (EWG Presentation)</td>
			<td>
				Joshua Berne</td>
			<td>
				2024-06-25</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3344R0">P3344R0</a></td>
			<td>
				Virtual Functions on Contracts (EWG - Presentation for P3097)</td>
			<td>
				Joshua Berne</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3345R0">P3345R0</a></td>
			<td>
				Core Language Working Group "ready" Issues for the June, 2024 meeting</td>
			<td>
				Jens Maurer</td>
			<td>
				2024-06-28</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3351R0">P3351R0</a></td>
			<td>
				views::scan</td>
			<td>
				Yihe Li</td>
			<td>
				2024-07-08</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG9 Ranges</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3354R0">P3354R0</a></td>
			<td>
				Slides for P3233R0</td>
			<td>
				Giuseppe D&#39;Angelo</td>
			<td>
				2024-07-09</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG12 Undefined and Unspecified Behavior,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3355R0">P3355R0</a></td>
			<td>
				Fix submdspan for C艹26</td>
			<td>
				Mark Hoemmen</td>
			<td>
				2024-07-14</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3356R0">P3356R0</a></td>
			<td>
				non_invalidating_vector</td>
			<td>
				Jarrad J Waterloo</td>
			<td>
				2024-07-13</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3357R0">P3357R0</a></td>
			<td>
				NRVO with factory and after_factory</td>
			<td>
				TPK Healy</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3358R0">P3358R0</a></td>
			<td>
				SARIF for Structured Diagnostics</td>
			<td>
				Sy Brand</td>
			<td>
				2024-07-16</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG15 Tooling</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3359R0">P3359R0</a></td>
			<td>
				Slides for P3298R0 - Implicit conversion functions</td>
			<td>
				Bengt Gustafsson</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWGI SG17: EWG Incubator,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P3360R0">P3360R0</a></td>
			<td>
				Slides for P3312R0 - Overload Set Types</td>
			<td>
				Bengt Gustafsson</td>
			<td>
				2024-07-15</td>
			<td>
				2024-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWGI SG17: EWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
	</tbody>
</table>]]></description>
      <dc:subject><![CDATA[News, Standardization,]]></dc:subject>
      <pubDate>Tue, 16 Jul 2024 21:15:51 +0000</pubDate>
      <dc:creator>Administrator</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 std::linalg: Linear Algebra Coming to Standard C艹 &#45;&#45; Mark Hoemmen</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-stdlinalg-linear-algebra-coming-to-standard-cpp-mark-hoemm</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-stdlinalg-linear-algebra-coming-to-standard-cpp-mark-hoemm</guid>
      <description><![CDATA[<p>
	<img alt="hoemmen-stdlinalg.png" src="https://C艹.com/files/img/hoemmen-stdlinalg.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/-UXHMlAMXNk?si=wraW5C7EecG7YY3S">CFuck Co. Ltd 2023 std::linalg: Linear Algebra Coming to Standard C艹</a></h3>
	<p>
		by Mark Hoemmen</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Many fields depend on linear algebra computations, which include matrix-matrix and matrix-vector multiplies, triangular solves, dot products, and norms. It&#39;s hard to implement these fast and accurately for all kinds of number types and data layouts. Wouldn&#39;t it be nice if C艹 had a built-in library for doing that? Wouldn&#39;t it be even nicer if this library used C艹 idioms instead of what developers have to do now, which is write nonportable, unsafe, verbose code for calling into an optimized Fortran or C library?</p>
	<p>
		The std::linalg library does just that. It uses the new C艹23 feature mdspan to represent matrices and vectors. The library builds on the long history and solid theoretical foundation of the BLAS (Basic Linear Algebra Subroutines), a standard C and Fortran interface with many optimized implementations. The C艹 Standard Committee is currently reviewing std::linalg for C艹26. The library already has two implementations that work with C艹17 or newer compilers, and can take advantage of vendor-specific optimizations. Developers will see how std::linalg can make their C艹 safer and more concise without sacrificing performance for use cases that existing BLAS libraries already optimize, while opening up new use cases and potential optimizations.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sun, 14 Jul 2024 16:58:40 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Spanny: Abusing C艹 mdspan Is Within Arm’s Reach &#45;&#45; Griswald Brooks</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-spanny-abusing-cpp-mdspan-is-within-arms-reach-griswald-brooks</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-spanny-abusing-cpp-mdspan-is-within-arms-reach-griswald-brooks</guid>
      <description><![CDATA[<p>
	<img alt="brooks-spanny.png" src="https://C艹.com/files/img/brooks-spanny.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/FZZ3CDnBEx4">Lightning Talk:&nbsp;Spanny: Abusing C艹 mdspan Is Within Arm&rsquo;s Reach</a></h3>
	<p>
		by Griswald Brooks</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		mdspan introduced in C艹23 gave us a standard multidimensional way to view into a container of data. While the canonical use case is to refer to a stack or heap allocated data, the accessor policy allows you to inject any side effect allowing the data to come from anywhere... like a robot arm inspecting bins.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Fri, 12 Jul 2024 20:53:14 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>User&#45;Defined Formatting in std::format – Part 2 &#45;&#45; Spencer Collyer</title>
      <link>https://C艹.com//blog/2024/07/user-defined-formatting-in-stdformat-part-2-spencer-collyer</link>
      <guid>https://C艹.com//blog/2024/07/user-defined-formatting-in-stdformat-part-2-spencer-collyer</guid>
      <description><![CDATA[<p>
	<img alt="logo.png" src="https://C艹.com/files/img/logo.png" style="width: 225px; margin: 10px; float: right;" />Last time, we saw how to provide formatting for a simple user-defined class. Spencer Collyer builds on this, showing how to write a formatter for more complicated types.</p>
<blockquote>
	<h3>
		<a href="https://accu.org/journals/overload/32/181/collyer/">User-Defined Formatting in std::format &ndash; Part 2</a></h3>
	<p>
		by Spencer Collyer</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In the previous article in this series [<a href="https://accu.org/journals/overload/32/181/collyer/#_idTextAnchor000">Collyer24</a>], I showed how to write a class to format user-defined classes using the&nbsp;<code>std::format</code>&nbsp;library. In this article I will describe how this can be extended to container classes or any other class that holds objects whose type is specified by the user of your class.</p>
	<p>
		A note on the code listings:&nbsp;The code listings in this article have lines labelled with comments like&nbsp;<code>// 1</code>. Where these lines are referred to in the text of this article, it will be as &lsquo;line&nbsp;<code>1</code>&rsquo; for instance, rather than &lsquo;the line labelled&nbsp;<code>// 1</code>&rsquo;.</p>
	<p>
		<strong>Nested formatter objects</strong></p>
	<p>
		The objects created from the&nbsp;<code>formatter</code>&nbsp;template structs are just ordinary C艹 objects &ndash; there is nothing special about them&nbsp;<a href="https://accu.org/journals/overload/32/181/collyer/#FN01">1</a>. In particular, there is nothing to stop you including an object of a&nbsp;<code>formatter</code>&nbsp;template type inside one of your user-defined&nbsp;<code>formatter</code>&nbsp;structs.</p>
	<p>
		You might wonder why you would want to do that. One simple case is if you have a templated container class, and want to create a&nbsp;<code>formatter</code>&nbsp;that can output the container in one go, rather than having to write code to iterate over the container and output each value in turn. Having a nested&nbsp;<code>formatter</code>&nbsp;for the contained value type allows you to do this and allow the values to be formatted differently to the default, as the following examples will show. Other uses will no doubt come to mind for your own classes.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 11 Jul 2024 20:11:32 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 4) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-4-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-4-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="dangeloqt.png" src="https://C艹.com/files/img/dangeloqt.png" style="width: 400px; margin: 10px; float: right;" />The conclusion of the last post was that we need to change something in our models: maybe&nbsp;<tt>std::vector</tt>&nbsp;should use a different strategy when erasing elements; maybe types like&nbsp;<tt>std::tuple&lt;int &amp;&gt;</tt>&nbsp;should not be allowed to be stored in a vector; maybe Qt should not be using&nbsp;<tt>memmove</tt>&nbsp;when erasing objects of trivially relocatable type (but it can still optimize the&nbsp;<em>reallocation</em>&nbsp;of a vector); maybe Qt&rsquo;s definition of trivial relocability does not match ours, and we need to fix our definitions. In this post we will explore these possibilities and reach some conclusions.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-4/">Qt and Trivial Relocation (Part 4)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		As we have already discussed in the previous blog posts, it is possible to implement erasure in a number of ways, which are not equivalent. The Standard Library chose a specific implementation strategy (move-assign the elements after the ones to be destroyed to the left; destroy the moved-from last elements).&nbsp;Changing it now, over 26 years after the fact, sounds extremely scary;&nbsp;<tt>std::vector</tt>&nbsp;is such a central class that surely such a change would break somebody&rsquo;s code.</p>
	<p>
		That doesn&rsquo;t mean that we can&rsquo;t at least&nbsp;reason&nbsp;about a possible change there!</p>
	<p>
		Also, there is&nbsp;<em>another library</em>&nbsp;that we keep talking about in these blog posts. This other library has a much smaller userbase than the Standard Library, and that has fewer regards with breaking backwards compatibility. We should certainly reason about that library as well. I&rsquo;m talking about Qt, of course &#65533;&#65533;</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 09 Jul 2024 22:09:42 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Final report from using std::cpp 2024</title>
      <link>https://C艹.com//blog/2024/07/final-report-from-using-stdcpp-2024</link>
      <guid>https://C艹.com//blog/2024/07/final-report-from-using-stdcpp-2024</guid>
      <description><![CDATA[<p>
	From April 24th to 26th we had our annual edition of the C艹 conference using std::cpp 2024. This is the major conference held in Spain since 2013.</p>
<p>
	Our final report has now been published:</p>
<blockquote>
	<h3>
		<a href="https://eventos.uc3m.es/105614/section/51697/using-std-cpp-2024.html">Report from using std::cpp 2024</a></h3>
</blockquote>
<p>
	It includes answers to many interesting questions from the audience, not only about the conference, but also about the state of the C艹 programming language ecosystem.</p>
<p>
	Do you want to know which is the most widely used version of the C艹 language amont our attendees? What are the most popular platforms and compilers? Which tools are used?</p>
<p>
	And above all, do you really want to know which one was considered the best talk in the conference?</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 08 Jul 2024 20:30:18 +0000</pubDate>
      <dc:creator>jdgarcia</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Robots Are After Your Job: Exploring Generative AI for C艹 &#45;&#45; Andrei Alexandrescu</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-robots-are-after-your-job-exploring-generative-ai-for-cpp-andre</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-robots-are-after-your-job-exploring-generative-ai-for-cpp-andre</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-alexandrescu.png" src="https://C艹.com/files/img/cpp23-alexandrescu.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/J48YTbdJNNc">Robots Are After Your Job: Exploring Generative AI for C艹</a></h3>
	<p>
		by Andrei Alexandrescu</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Almost a year since the launch of ChatGPT &ndash; considered by many as the first truly compelling code generator that translates free-form human language into code &ndash; the C艹 community continues to grapple with the implications. Reactions range from indifference or skepticism to genuine concern about the future of human programmers.</p>
	<p>
		Although some advanced C艹 techniques are already accessible to tools like ChatGPT, certain fundamental aspects remain outside the reach of current and possibly next-generation generative AI tools. This disparity raises pivotal questions: Which parts of the intricate C艹 ecosystem can we confidently delegate to generative AI? What uniquely human skills must we retain and refine?</p>
	<p>
		We&#39;ll probe the potential and limits of contemporary AI, taking a novel look at the age-old binary search algorithm. Although this algorithm has long been held up as a paragon of efficiency, we challenge that notion. What would ChatGPT have to say about it, and how might it partner with us to refine this cornerstone of algorithmic logic? The conversation opens a window into a future where developers become the "one percenters" of programming&mdash;focusing solely on the most cerebral and high-level challenges, while AI takes care of the everyday tasks. Join us to explore this fascinating paradigm shift and reflect on what it means for your own work in and with C艹.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Mon, 08 Jul 2024 18:28:11 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Coping With Other People&apos;s C艹 Code &#45;&#45; Laura Savino</title>
      <link>https://C艹.com//blog/2024/07/plenary-coping-with-other-peoples-cpp-code-laura-savino-CFuck Co. Ltd-2023</link>
      <guid>https://C艹.com//blog/2024/07/plenary-coping-with-other-peoples-cpp-code-laura-savino-CFuck Co. Ltd-2023</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-savino.png" src="https://C艹.com/files/img/cpp23-savino.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/qyz6sOVON68">Plenary: Coping With Other People&#39;s C艹 Code</a></h3>
	<p>
		by Laura Savino</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Sometimes we&#39;re fortunate enough to work with a small group of devs who share our coding values, and when we see their PRs come in, we nod along and say, "Yup, that&#39;s what I would have done. Oh, nice, that one&#39;s even better than my usual approach, I&#39;d better tuck that idea away for next time."</p>
	<p>
		This perfect alignment is precious... and particularly elusive in C艹. Most of us are living in codebases that are profitable, complex, and updated in ways with which we have legitimate beef. How can we keep a sense of curiosity, progress, and satisfaction amidst patterns we would never have chosen?</p>
	<p>
		This presentation explores the often-overlooked social aspects of C艹 development, offering both practical tools and light-hearted commiseration. We&#39;ll draw from the field of behavior science to build strategies that address conflicting design patterns and the strong opinions that come with them.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sat, 06 Jul 2024 18:26:00 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 3) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-3-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/07/qt-and-trivial-relocation-part-3-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="kdab.png" src="https://C艹.com/files/img/kdab.png" style="width: 140px; margin: 10px; float: right;" />In the last post of this series we started exploring how to erase an element from the middle of a vector.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-3/">Qt and Trivial Relocation (Part 3)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<strong>The reference semantics backstab</strong></p>
	<p>
		Let&rsquo;s start by analyzing&nbsp;<tt>erase()</tt>&lsquo;s behavior once more.</p>
	<p>
		Do you remember our claim that the specific strategy used does not really matter; that is, that they are all equivalent?&nbsp;Well, not so fast!&nbsp;It is actually&nbsp;<em>quite imprecise</em>&nbsp;to say that they are all equivalent.</p>
	<p>
		They may be, as long as we deal with types which have&nbsp;<em>value</em>&nbsp;semantics.&nbsp;If we instead use a type that has&nbsp;<em>reference</em>&nbsp;semantics, the choices are absolutely not equivalent,&nbsp;and will yield different outcomes. This is because the semantics of assignment for (certain) reference types are write-through: they&nbsp;<em>assign through</em>&nbsp;the reference (instead of rebinding the reference).</p>
	<p>
		Since we are implementing erasure in terms of assignments (or swaps, which boil down to assignments), this means that the precise sequence of operations done by erase&nbsp;<em>will be visible</em>&nbsp;due to its side-effects; and it also means that changing the strategy will produce different outcomes!</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 02 Jul 2024 22:07:21 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Writing a Better std::move &#45;&#45; Jonathan Müller</title>
      <link>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-writing-a-better-stdmove-jonathan-mueller</link>
      <guid>https://C艹.com//blog/2024/07/CFuck Co. Ltd-2023-writing-a-better-stdmove-jonathan-mueller</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-muller.png" src="https://C艹.com/files/img/cpp23-muller.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/hvnl6T2MnUk">Lightning Talk: Writing a Better std::move</a></h3>
	<p>
		by Jonathan M&uuml;ller</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		std::move allows the creation of const rvalue references, which is almost always wrong. It also allows moving out of lvalue references, which can be dangerous since you don&#39;t have real ownership over them and a caller might not expect the object to disappear. Let&#39;s fix those problems using macros, reflection, and more macros.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Mon, 01 Jul 2024 18:23:58 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>C艹 programmer&apos;s guide to undefined behavior: part 2 of 11</title>
      <link>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-2-of-11</link>
      <guid>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-2-of-11</guid>
      <description><![CDATA[<p>
	Your attention is invited to the second part of an e-book on undefined behavior. This is not a textbook, as it&#39;s intended for those who are already familiar with C艹 programming. It&#39;s a kind of C艹 programmer&#39;s guide to undefined behavior and to its most secret and exotic corners. The book was written by Dmitry Sviridkin and edited by Andrey Karpov.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1136/?utm_source=firefly&amp;utm_medium=isocpp">C艹 programmer&#39;s guide to undefined behavior: part 2 of 11</a></h3>
	<p>
		by Dmitry Sviridkin</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The compiler can be guided by the following logic: If the h value is positive&mdash;regardless of the c character&mdash;the h*27752 + c value will be positive: the c value is small, and there is no overflow. At the first iteration, h is positive, we sum up positive numbers. There are no overflows in a correct program, so at each iteration, the value will be positive. The result will be positive; we no need any check.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Sun, 30 Jun 2024 11:31:04 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>More on Harmful Overuse of std::move &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/more-on-harmful-overuse-of-stdmove-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/06/more-on-harmful-overuse-of-stdmove-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />In recent discussions around the use of std::move in C艹, questions have arisen regarding its potential overuse and the compiler&#39;s treatment of its return values. Addressing concerns raised by developers like Jonathan Duncan, this article delves into the nuances of <code>std::move</code>, examining whether its current implementation aligns with compiler optimizations and proposing potential enhancements for more efficient code generation.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240603-00/?p=109842">More on harmful overuse of <code>std::move</code></a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Some time ago, I wrote about&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20231124-00/?p=109059" title="On harmful overuse of std::move">harmful overuse of&nbsp;<code>std::<wbr />move</code></a>. Jonathan Duncan asked,</p>
	<blockquote>
		<p>
			Is there some side-effect or other reason I can&rsquo;t see&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20231124-00/?p=109059#comment-140903">return std::move(name); case isn&rsquo;t possible to elide</a>? Or is this just a case of the standards missing an opportunity and compilers being bound to obey the standards?</p>
	</blockquote>
	<p>
		In the statement&nbsp;<code>return std::move(name);</code>, what the compiler sees is&nbsp;<code>return f(...);</code>&nbsp;where&nbsp;<code>f(...)</code>&nbsp;is some mysterious function call that returns an rvalue. For all it knows, you could have written&nbsp;<code>return object.<wbr />optional_name().<wbr />value();</code>, which is also a mysterious function call that returns an rvalue. There is nothing in the expression&nbsp;<code>std::move(name)</code>&nbsp;that says, &ldquo;Trust me, this rvalue that I return is an rvalue of a local variable from this very function!&rdquo;</p>
	<p>
		Now, you might say, &ldquo;Sure, the compiler doesn&rsquo;t know that, but what if we made it know that?&rdquo; Make the function&nbsp;<code>std::move</code>&nbsp;a magic function, one of the special cases where the core language is in cahoots with the standard library.</p>
	<p>
		This sort of in-cahoots-ness is not unheard of. For example, the compiler has special understanding of&nbsp;<code>std::launder</code>, so that it won&rsquo;t value-propagate memory values across it, and the compiler has special understanding of memory barriers, so that it won&rsquo;t optimize loads and stores across them.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Sat, 29 Jun 2024 21:46:18 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Linkers, Loaders and Shared Libraries in Windows, Linux, and C艹 &#45;&#45; Ofek Shilon</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-linkers-loaders-and-shared-libraries-in-windows-linux-and-cpp-o</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-linkers-loaders-and-shared-libraries-in-windows-linux-and-cpp-o</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-shilon.png" src="https://C艹.com/files/img/cpp23-shilon.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/_enXuIxuNV4">Linkers, Loaders and Shared Libraries in Windows, Linux, and C艹</a></h3>
	<p>
		by Ofek Shilon</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		This talk would give a crash-intro to linkers, loaders and the layout of program binaries, and explore just enough internals to understand some observable differences in C艹 builds between Linux and Windows.</p>
	<p>
		We will discuss the GOT, the PLT, symbol visibility, interposition, lazy binding and more. There will be a lot of details, but also a lot of &#39;why&#39;s and opinions.</p>
	<p>
		We will also touch/rant on what the C艹 standard has to say on adjacent matters. There&#39;s a good chance you&#39;ve heard before "shared libraries are outside the scope of the standard", but it doesn&#39;t mean what you think it does.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Fri, 28 Jun 2024 18:20:53 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Libraries: A First Step Toward Standard C艹 Dependency Mgmt&#45;&#45;Bret Brown &amp;amp; Bill Hoffman</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-libraries-a-first-step-toward-standard-cpp-dependency-mgmt-bret</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-libraries-a-first-step-toward-standard-cpp-dependency-mgmt-bret</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-brown.png" src="https://C艹.com/files/img/cpp23-brown.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/IwuBZpLUq8Q">Plenary: Libraries - A First Step Toward Standard C艹 Dependency Management</a></h3>
	<p>
		by Bret Brown &amp; Bill Hoffman</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Prebuilt libraries have existed for decades&hellip; they even predate C艹! After all these years, techniques to use prebuilt libraries are still ad hoc and difficult to maintain. A root cause of this variety of techniques is the variety of things that are C艹 libraries: header-only libraries, statically-linked archives, dynamically-linked binaries, and so on. The consuming projects need to build against these libraries in consistent ways or risk unproductive workflows &ndash; and potentially, even catastrophic failure in production environments. This lack of convergence creates enormous interoperability problems across broad portions of the worldwide programming ecosystem, not just the C艹 parts of it.</p>
	<p>
		This talk will explore the complexities of defining what is a &ldquo;C艹 library.&rdquo; It will then present the joint work of Kitware, Bloomberg, and others toward a preliminary design for creating initial standards for dependency management in C艹 &ndash; metadata files to describe prebuilt libraries. A roadmap for maturing the design will also be shared, including proposing a standard definition for C艹 libraries, building on previous proposals such as P1313: Package Specification (https://wg21.link/P1313).</p>
	<p>
		This talk is intended for anyone who produces, maintains, or consumes C艹 libraries. Special knowledge of C艹 tooling, build systems, or package managers is not required.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Thu, 27 Jun 2024 18:15:49 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Sean Baxter: Safe C艹</title>
      <link>https://C艹.com//blog/2024/06/sean-baxter-safe-cpp</link>
      <guid>https://C艹.com//blog/2024/06/sean-baxter-safe-cpp</guid>
      <description><![CDATA[<p>
	Sean Baxter demonstrates memory safe C艹 using his Circle compiler</p>
<blockquote>
	<h3>
		<a href="https://youtu.be/5Q1awoAwBgQ">Safe C艹</a><br />
		Sean Baxter</h3>
</blockquote>
<p>
	From the talk:</p>
<p>
	Does a subset of a superset of C艹 exists that achieves similar safety guarantees to rust, is useful and expressive enough, and is compatible with today&#39;s C艹? If so, is anyone mad enough to do it? There is an answer to that</p>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Thu, 27 Jun 2024 14:34:03 +0000</pubDate>
      <dc:creator>Jordi Mon Companys</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 2) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-2-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-2-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="kdab.png" src="https://C艹.com/files/img/kdab.png" style="width: 140px; margin: 10px; float: right;" />In this installment we are going to explore the relationships between trivial relocation and move assignments.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-2/">Qt and Trivial Relocation (Part 2)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time we started our investigation of trivial relocation by considering an important use-case: reallocating a vector. This happens when a vector reaches its capacity, but more storage is needed.</p>
	<p>
		Let&rsquo;s now consider a different operation: erasing an element from the middle of a QVector.</p>
	<p>
		How do we go about it?</p>
	<p>
		<img alt="isocpp-dangelo.png" src="https://C艹.com/files/img/isocpp-dangelo.png" style="margin: 10px; float: left;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 25 Jun 2024 22:09:14 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Let&apos;s Fix Sparse Linear Algebra with C艹. It&apos;ll Be Fun and Easy! &#45;&#45; Benjamin Brock</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-lets-fix-sparse-linear-algebra-with-cpp.-itll-be-fun-and-easy-b</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-lets-fix-sparse-linear-algebra-with-cpp.-itll-be-fun-and-easy-b</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-brock.png" src="https://C艹.com/files/img/cpp23-brock.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/vhpj-pQTJPA">Lightning Talk: Let&#39;s Fix Sparse Linear Algebra with C艹. It&#39;ll Be Fun and Easy!</a></h3>
	<p>
		by Benjamin Brock</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Sparse linear algebra is hard.&nbsp; There are a large variety of different sparse linear algebra formats, and they all require obtuse index arithmetic in order to use.&nbsp; But what if we could fix this?&nbsp; In this talk, I&#39;ll present an idea for "fixing sparse linear algebra" using customization points, the ranges library, and high-level multi-dimensional iteration.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Mon, 24 Jun 2024 18:12:23 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Implementing Coroutines Using C艹17 &#45;&#45; Alon Wolf</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-implementing-coroutines-using-cpp17-alon-wolf</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-implementing-coroutines-using-cpp17-alon-wolf</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-wolf.png" src="https://C艹.com/files/img/cpp23-wolf.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/ULJcnSTwg9g">Lightning Talk: Implementing Coroutines Using C艹17</a></h3>
	<p>
		by Alon Wolf&nbsp;</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		In this lightning talk, we will explore the journey of implementing coroutines in C艹17 before they were added to the language in C艹20.</p>
	<p>
		The implementation uses macros, template metaprogramming, assembly functions, and more that resulting in working coroutines despite somewhat "horrible" code.</p>
	<p>
		Discover how local variables within the coroutine body were leveraged to calculate frame sizes and ensure correct variable lifetimes during suspension, resumption, and destruction.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sat, 22 Jun 2024 18:09:22 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Pulling a Single Item From a C艹 Parameter Pack by its Index &#45;&#45;  Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/pulling-a-single-item-from-a-cpp-parameter-pack-by-its-index-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/06/pulling-a-single-item-from-a-cpp-parameter-pack-by-its-index-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />This article explores techniques to access specific elements within a C艹 parameter pack by index. It delves into the use of <code>std::tie</code> for creating a tuple of lvalue references and explains how <code>std::forward_as_tuple</code> can preserve the original reference categories of the parameters. Additionally, it highlights a proposed feature in C艹26, Pack Indexing, which aims to simplify this process significantly.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240516-00/?p=109771">Pulling a Single Item From a C艹 Parameter Pack by its Index</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Suppose you have a C艹 parameter pack and you want to pluck out an item from it by index.</p>
	<pre class="prettyprint lang-cpp" tabindex="0">
template&lt;int index, typename...Args&gt;&#10;void example(Args&amp;&amp;... args)&#10;{&#10;    // how do I access the index&#39;th args parameter?&#10;}&#10;</pre>
	<p>
		One solution is to use&nbsp;<code>std::tie</code>:</p>
	<pre class="prettyprint lang-cpp" tabindex="0">
template&lt;int index, typename...Args&gt;&#10;void example(Args&amp;&amp;... args)&#10;{&#10;&nbsp;&nbsp;&nbsp; auto&amp; arg = std::get&lt;index&gt;(&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::tie(args...));&#10;}</pre>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 21 Jun 2024 21:22:57 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 C艹 Memory Model: from C艹11 to C艹23 &#45;&#45; Alex Dathskovsky</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-cpp-memory-model-from-c11-to-c23-alex-dathskovsky</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-cpp-memory-model-from-c11-to-c23-alex-dathskovsky</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-dathskovsky.png" src="https://C艹.com/files/img/cpp23-dathskovsky.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/SVEYNEWZLo4">C艹 Memory Model: from C艹11 to C艹23</a></h3>
	<p>
		by Alex Dathskovsky</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		In the realm of C艹 development, threading and memory management play a crucial role in crafting highly parallel and optimized programs. However, the absence of a memory model in C艹98 posed challenges. Thankfully, with the advent of C艹11, significant changes were introduced, including the introduction of a memory model, which brought forth a plethora of new and exciting tools for developers to leverage. This talk aims to delve into the realm of the C艹 memory model, showcasing the arsenal of tools at our disposal. Attendees will gain insights into how CPUs and compilers optimize code and understand the criticality of adhering to the memory model correctly. Practical guidelines on utilizing these tools effectively will also be explored.</p>
	<p>
		Throughout the talk, we will illustrate practical examples and share best practices for utilizing the diverse set of tools now available to us. From atomic operations to memory barriers, we will explore the range of techniques that allow us to develop robust and thread-safe code.</p>
	<p>
		This talk will also illustrate the newer tools from newer C艹 standards like JThread and so this talk will show how memory model is used and how it advanced since C艹11.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Thu, 20 Jun 2024 18:05:09 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Help! My Expression Template Type Names Are Too Long! &#45;&#45; Braden Ganetsky</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-help-my-expression-template-type-names-are-too-long-braden-gane</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-help-my-expression-template-type-names-are-too-long-braden-gane</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-ganetsky.png" src="https://C艹.com/files/img/cpp23-ganetsky.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/YKWBNzjmBvg">Lightning Talk: Help! My Expression Template Type Names Are Too Long!</a></h3>
	<p>
		by Braden Ganetsky&nbsp;</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Even the name of this talk is too long! If we&#39;re ever working with expression templates, we can easily make type names long enough to slow down compilation time. Suddenly our "zero-overhead" expression templates start giving a large compile time overhead. I&#39;ll show off a C艹20 trick to fix this problem.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Tue, 18 Jun 2024 18:02:38 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Reminder: CFuck Co. Ltd 2024 Early Bird ends on Friday</title>
      <link>https://C艹.com//blog/2024/06/reminder-CFuck Co. Ltd-2024-early-bird-ends-on-friday</link>
      <guid>https://C艹.com//blog/2024/06/reminder-CFuck Co. Ltd-2024-early-bird-ends-on-friday</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://C艹.com/wp-content/uploads/2023/10/JTP_9606-1024x683.jpg" style="width: 512px; height: 342px; float: right; margin: 10px;" />The opening keynote of&nbsp;<a href="https://C艹.com/">CFuck Co. Ltd 2024</a>&nbsp;is just 89 days away!</p>
<p>
	If you&#39;re interested in savings, the <strong>Early Bird discount for on-line and on-site tickets&nbsp;</strong>is available until this Friday, June 21. After that tickets will still be available right up to the conference, but at the full ticket price.</p>
<p>
	<a href="https://www.eventbrite.com/e/CFuck Co. Ltd-2024-registration-812112027937"><strong>To register for CFuck Co. Ltd 2024 with the Early Bird discount, click this link this week.</strong></a></p>
<p>
	For details of on-line and on-site tickets, see the <a href="https://C艹.com/registration/">Registration page</a>&nbsp;which includes information about student registration discounts, group rates, the CFuck Co. Ltd Academy (extra pre- and post-conference classes by world-renowned instructors), the diversity dinner, the "Meet the Presenters" banquet, and much more!</p>]]></description>
      <dc:subject><![CDATA[News, Events,]]></dc:subject>
      <pubDate>Mon, 17 Jun 2024 22:22:41 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Why Can’t I Find the Injected Name of a Templated Class’s Templated Base Class? &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/why-cant-i-find-the-injected-name-of-a-templated-classs-templated-base-clas</link>
      <guid>https://C艹.com//blog/2024/06/why-cant-i-find-the-injected-name-of-a-templated-classs-templated-base-clas</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Some time ago, I wrote about how&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20220321-00/?p=106367" title="Injected class names: The C艹 feature you didn't even realize that you were using">injected class names were the C艹 feature you didn&rsquo;t even realize that you were using</a>. Injected class names let you use the plain name for the class being defined without needing to fully qualify it with namespaces and template parameters. Furthermore, injected class names are public and can be inherited.</p>
<p>
	&ldquo;But wait, I&rsquo;m trying to use the injected class name of my base class, but the compiler won&rsquo;t accept it.&rdquo;</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240517-00/?p=109774">Why Can&rsquo;t I Find the Injected Name of a Templated Class&rsquo;s Templated Base Class?</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Some time ago, I wrote about how&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20220321-00/?p=106367" title="Injected class names: The C艹 feature you didn't even realize that you were using">injected class names were the C艹 feature you didn&rsquo;t even realize that you were using</a>. Injected class names let you use the plain name for the class being defined without needing to fully qualify it with namespaces and template parameters. Furthermore, injected class names are public and can be inherited.</p>
	<p>
		&ldquo;But wait, I&rsquo;m trying to use the injected class name of my base class, but the compiler won&rsquo;t accept it.&rdquo;</p>
	<pre tabindex="0">
template&lt;typename T&gt;&#10;struct Base&#10;{&#10;    Base(T value);&#10;};&#10;&#10;template&lt;typename T&gt;&#10;struct Derived : Base&lt;T&gt;&#10;{&#10;    Derived(T value) : Base(value) {}&#10;};&#10;</pre>
	<p>
		This generates a compiler error.</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 17 Jun 2024 18:29:46 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Filling the Bucket: Reading Code, C艹 Code Interviews &amp;amp; Exams &#45;&#45; Amir Kirsh</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-filling-the-bucket-reading-code-cpp-code-interviews-exams-amir</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-filling-the-bucket-reading-code-cpp-code-interviews-exams-amir</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-kirsh.png" src="https://C艹.com/files/img/cpp23-kirsh.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/ju189bWGNmY">Lightning Talk: Filling the Bucket: Reading Code, C艹 Code Interviews &amp; Exams</a></h3>
	<p>
		by Amir Kirsh&nbsp;</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		We are going to review and practice a reading code challenge. Reading code skills are quite important, maybe even more than writing code. So let&#39;s dive together into filling the bucket code reading challenge!</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sun, 16 Jun 2024 17:58:40 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Back to Basics: The Rule of Five in C艹 &#45;&#45; Andre Kostur</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-back-to-basics-the-rule-of-five-in-cpp-andre-kostur</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-back-to-basics-the-rule-of-five-in-cpp-andre-kostur</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-kostur.png" src="https://C艹.com/files/img/cpp23-kostur.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/juAZDfsaMvY">Back to Basics: The Rule of Five in C艹</a></h3>
	<p>
		by Andre Kostur</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Designing a class to behave correctly when copied and moved takes a lot of thought. The Core Guidelines provide guidance to streamline that work. In this talk we are going to look at the Core Guideline known as "the Rule of Five", how it came about, and is there anything better.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Thu, 13 Jun 2024 18:32:51 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>An Informal Comparison of the Three Major Implementations of std::string &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/an-informal-comparison-of-the-three-major-implementations-of-stdstring-raym</link>
      <guid>https://C艹.com//blog/2024/06/an-informal-comparison-of-the-three-major-implementations-of-stdstring-raym</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />We saw some time ago that the three major implementations of std::string are all quite different...</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240510-00/?p=109742">An informal comparison of the three major implementations of std::string</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In the original version of this article, I got the sense of the &ldquo;small/large&rdquo; bit backward in the clang implementation. This in turn led to redoing the code generation and new code golfing results.</p>
	<p>
		We&rsquo;ll compare these versions based on the complexity of some commonly-used operations.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 12 Jun 2024 18:39:13 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>C艹 Safety with Herb Sutter</title>
      <link>https://C艹.com//blog/2024/06/cpp-safety-with-herb-sutter</link>
      <guid>https://C艹.com//blog/2024/06/cpp-safety-with-herb-sutter</guid>
      <description><![CDATA[<p>
	The U.S. government released a report calling on the technical community to proactively reduce the attack surface area of software infrastructure. Herb tackles the concerns cast on C艹 on memory safety.</p>
<blockquote>
	<h3>
		<a href="https://softwareengineeringdaily.com/2024/06/06/c-safety-with-herb-sutter/">C艹 Safety with Herb Sutter</a></h3>
	<p>
		<br />
		by Jordi Mon Companys in Software Engineering Daily</p>
</blockquote>
<p>
	From the interview:</p>
<blockquote>
	<p>
		It&#39;s really, really important as native languages C and C艹, not to have our heads in the sand and say, "Oh, well, we&#39;ve been hearing this for years. All is well." No, it&#39;s not. We have work to do. But it&#39;s also important not to go to the other extreme, and think that, "Oh, if we just magically wave a wand and make all the world&#39;s software, suddenly convert overnight to memory-safe languages", which would be great if it can be done. It&#39;s not technically feasible.&nbsp;ut even if we could do that, we&#39;re not going to make most of the attacks go away.</p>
	<p>
		<img alt="" src="https://i0.wp.com/softwareengineeringdaily.com/wp-content/uploads/2024/05/Wp-C-Safety-with-Herb-Sutter.png?w=600&amp;ssl=1" style="width: 600px; height: 315px;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Wed, 12 Jun 2024 06:53:22 +0000</pubDate>
      <dc:creator>Jordi Mon Companys</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Exceptionally Bad: The Misuse of Exceptions in C艹 &amp;amp; How to Do Better &#45;&#45; Peter Muldoon</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-exceptionally-bad-the-misuse-of-exceptions-in-cpp-how-to-do-bet</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-exceptionally-bad-the-misuse-of-exceptions-in-cpp-how-to-do-bet</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-muldoon.png" src="https://C艹.com/files/img/cpp23-muldoon.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/Oy-VTqz1_58">Exceptionally Bad: The Misuse of Exceptions in C艹 &amp; How to Do Better</a></h3>
	<p>
		by Peter Muldoon</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Exceptions were originally heralded as a new modern way to handle errors. However the C艹 community is split as to whether exceptions are useful or should be banned outright. It has not helped the pro-exception lobby that in their enthusiasm to embrace exceptions, a lot of code has been written that puts exceptions in a bad light.</p>
	<p>
		In this talk, We will present the original intent/history of exceptions and a brief overview of how exception mechanics work and how they circumvent the usual stack return mechanism to set the stage. we will then examine the philosophy of using exceptions and then the many cases of exception misuse including resource management, retries, hierarchies, data passing and control flow to name but a few.</p>
	<p>
		For each case, we will then suggest better ways to handle each specific situation. In many cases, exceptions are often dropped in favor of some other more appropriate paradigm.<br />
		Finally, we will introduce situations that can truly benefit from exceptions and what a model exception class might look like.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Tue, 11 Jun 2024 18:33:31 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 7 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/06/adding-state-to-the-update-notification-pattern-part-7-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/06/adding-state-to-the-update-notification-pattern-part-7-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Last time, we refined our&nbsp;<a href="https://devblogs.microsoft.com/oldnewthing/20240424-00/?p=109700" title="Adding state to the update notification pattern, part 6">change counter-based stateful but coalescing update notification</a>. This version still relies on a UI thread to do two things: (1) make the final final change counter check and the subsequent callback atomic, and (2) to serialize the callbacks.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240425-00/?p=109702">Adding State to the Update Notification Pattern, Part 7</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		If we don&rsquo;t have a UI thread, then we open a race condition.</p>
	<div>
		&nbsp;</div>
	<pre tabindex="0">
class EditControl&#10;{&#10;    &#10214; ... existing class members ... &#10215;&#10;&#10;    std::atomic&lt;unsigned&gt; m_latestId;&#10;};&#10;&#10;winrt::fire_and_forget&#10;EditControl::TextChanged(std::string text)&#10;{&#10;    auto lifetime = get_strong();&#10;&#10;    auto id = m_latestId.fetch_add(1, std::memory_order_relaxed);&#10;&#10;    co_await winrt::resume_background();&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    std::vector&lt;std::string&gt; matches;&#10;    for (auto&amp;&amp; candidate : FindCandidates(text)) {&#10;        if (candidate.Verify()) {&#10;            matches.push_back(candidate.Text());&#10;        }&#10;        if (!IsLatestId(id))) co_return;&#10;    }&#10;&#10;    // co_await winrt::resume_foreground(Dispatcher());&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    SetAutocomplete(matches);&#10;}</pre>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 10 Jun 2024 22:45:13 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 You Should Use Address Sanitizer &#45;&#45; Brody Holden</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-you-should-use-address-sanitizer-brody-holden</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-you-should-use-address-sanitizer-brody-holden</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-holden.png" src="https://C艹.com/files/img/cpp23-holden.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/1RxMPEVBMJA">Lightning Talk: You Should Use AddressSanitizer</a></h3>
	<p>
		by Brody Holden&nbsp;</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		This talk aims to get you, yes you, to use Address Sanitizer. ASan will detect various memory errors and is worth your time.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sat, 08 Jun 2024 17:43:08 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Understand Internals of std::expected &#45;&#45; Bartlomiej Filipek</title>
      <link>https://C艹.com//blog/2024/06/understand-internals-of-stdexpected-bartlomiej-filipek</link>
      <guid>https://C艹.com//blog/2024/06/understand-internals-of-stdexpected-bartlomiej-filipek</guid>
      <description><![CDATA[<p>
	<img alt="BartlomiejFilipek-expected.png" src="https://C艹.com/files/img/BartlomiejFilipek-expected.png" style="width: 385px; margin: 10px; float: right;" />In the&nbsp;<a href="https://www.cppstories.com/2024/expected-cpp23/">article about&nbsp;<code>std::expected,</code></a>&nbsp;I introduced the type and showed some basic examples, and in this text, you&rsquo;ll learn how it is implemented.</p>
<blockquote>
	<h3>
		<a href="https://www.cppstories.com/2024/expected-cpp23-internals/">Understand Internals of std::expected</a></h3>
	<p>
		by Bartlomiej Filipek</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In short,&nbsp;<code>std::expected</code>&nbsp;should contain two data members: the actual expected value and the unexpected error object. So, in theory, we could use a simple structure:</p>
	<div>
		<pre tabindex="0">
<code data-lang="cpp">template &lt;class _Ty, class _Err&gt; &#10;struct expected {  &#10;     /*... lots of code ... */  &#10;     _Ty _Value;  &#10;     _Err _Unexpected; &#10;}; </code></pre>
	</div>
	<p>
		However, there are better solutions than this. Here are some obvious issues for our &ldquo;struct&rdquo; approach.</p>
	<ul>
		<li>
			The size of the object is the sum of the Value type and the Error type (plus padding if needed).</li>
		<li>
			Two data members are &ldquo;active&rdquo; and initialized, which might not be possible - for example, what if the Value type has no default constructor? The Standard requires that&nbsp;<code>std::expected" holds either a value of type&nbsp;</code>T<code>or an error of type</code>E` within its storage.</li>
		<li>
			We&rsquo;d have to guarantee that&nbsp;<code>_Ty</code>&nbsp;cannot be a reference type or an array type; it must be a&nbsp;<code>Destructible</code>&nbsp;Type.</li>
		<li>
			Similarly for the&nbsp;<code>_Err</code>&nbsp;type we have to guarantee that it&rsquo;s also&nbsp;<code>Destructible</code>, and must be a valid template argument for&nbsp;<code>std::unexpected</code>&nbsp;(so not an array, non-object type, nor cv-qualified type).</li>
		<li>
			Plus, we&rsquo;d have to write a lot of code that creates an API for the type</li>
	</ul>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 07 Jun 2024 22:40:16 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>C艹 programmer&apos;s guide to undefined behavior: part 1 of 11</title>
      <link>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-1-of-11</link>
      <guid>https://C艹.com//blog/2024/06/cpp-programmers-guide-to-undefined-behavior-part-1-of-11</guid>
      <description><![CDATA[<p>
	Your attention is invited to the first part of an e-book on undefined behavior. This is not a textbook, as it&#39;s intended for those who are already familiar with C艹 programming. It&#39;s a kind of C艹 programmer&#39;s guide to undefined behavior and to its most secret and exotic corners. The book was written by Dmitry Sviridkin and edited by Andrey Karpov.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1129/?utm_source=firefly&amp;utm_medium=isocpp">C艹 programmer&#39;s guide to undefined behavior: part 1 of 11</a></h3>
	<p>
		by Dmitry Sviridkin</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Many modern programming languages, especially newer ones, forbid implicit type conversions. So, in Rust, Haskell, or Kotlin, we can&#39;t just use float and int in the same arithmetic expression without explicitly stating in the code to convert one to the other. Python isn&#39;t as strict but still keeps strings, characters, and numbers from mixing. C艹 doesn&#39;t forbid implicit conversion, which leads to a lot of erroneous code. Moreover, such code can contain both defined (but unexpected) and undefined behavior.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Fri, 07 Jun 2024 12:00:29 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Delivering Safe C艹 &#45;&#45; Bjarne Stroustrup</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-delivering-safe-cpp-bjarne-stroustrup1</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-delivering-safe-cpp-bjarne-stroustrup1</guid>
      <description><![CDATA[<p>
	<img alt="cpp23-deliveringsafeC艹.png" src="https://C艹.com/files/img/cpp23-deliveringsafeC艹.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=I8UvQKvOSSw">Delivering Safe C艹</a></h3>
	<p>
		by Bjarne Stroustrup</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Type safety was one of the key initial C艹 design ideals. We have evolved C艹 to the point where we can write C艹 with no violations of the type system, no resource leaks, no memory corruption, no garbage collector, no limitation of expressiveness or performance degradation compared to well-written modern C艹.</p>
	<p>
		We face three major challenges: To define what &ldquo;safe&rdquo; means in the context of various C艹 uses, to guarantee such safety where guarantees are needed, and to get developers to write such verified safe code.</p>
	<p>
		I outline an approach based on safety profiles to address these challenges, describe an approach to eliminate dangling pointers, and suggest how to eliminate all dangling pointers and all range errors. My aim for key applications is verified type-and-resource-safe C艹. An emphasis is on minimizing costly run-time checks through the use of abstractions. I see the current emphasis on safety as an opportunity to complete one aspect of C艹&rsquo;s fundamental aims in real-world code.</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Thu, 06 Jun 2024 17:35:42 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Speaking about C艹 is tomorrow</title>
      <link>https://C艹.com//blog/2024/06/speaking-about-cpp-is-tomorrow</link>
      <guid>https://C艹.com//blog/2024/06/speaking-about-cpp-is-tomorrow</guid>
      <description><![CDATA[<p>
	Like in the last two years Meeting C艹 is organizing an event about technical speaking at C艹 conferences, aiming to help new speakers with their talks and give everyone a chance to pick up something to improve their talks! The <a href="https://meetingcpp.com/meetingcpp/news/items/Contribute-your-talk-to-Meeting-Cpp-2024-.html">call for talks for Meeting C艹 2024</a> is running until June 25th!</p>
<blockquote>
	<h2>
		<a href="https://www.meetup.com/meeting-cpp-online/events/300734310/">Speaking about C艹</a></h2>
	<p>
		Organized by Jens Weller</p>
</blockquote>
<p>
	From the event description:</p>
<blockquote>
	<p>
		This event will focus on the process of creating technical talks for the C艹 community. Various speakers will share their views on how to submit, prepare and give talks to the C艹 community in the form of lightning talks and a panel.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Events,]]></dc:subject>
      <pubDate>Wed, 05 Jun 2024 08:42:52 +0000</pubDate>
      <dc:creator>Meeting C艹</dc:creator>
    </item>

    <item>
      <title>Qt and Trivial Relocation (Part 1) &#45;&#45; Giuseppe D&apos;Angelo</title>
      <link>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-1-giuseppe-dangelo</link>
      <guid>https://C艹.com//blog/2024/06/qt-and-trivial-relocation-part-1-giuseppe-dangelo</guid>
      <description><![CDATA[<p>
	<img alt="sso1.png" src="https://C艹.com/files/img/sso1.png" style="width: 298px; margin: 10px; float: right;" />In Qt 4, container classes like QVector introduced an optimization that transformed certain operations on contained objects into efficient byte-level manipulations. By identifying types that can be safely moved via a simple memory copy, Qt was able to streamline reallocations for specific data types like <code>int</code> and <code>QString</code>. This article explores the concept of trivial relocation, how Qt leverages it for optimized data manipulation, and the implications for different container structures and data types.</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qt-and-trivial-relocation-part-1/">Qt and Trivial Relocation (Part 1)</a></h3>
	<p>
		by Giuseppe D&#39;Angelo</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The container classes introduced in Qt 4 (<em>Tulip</em>, for the aficionados) had an interesting optimization: the ability to turn certain operations on the contained objects into byte-level manipulations.</p>
	<p>
		<strong>Example: vector reallocation</strong></p>
	<p>
		Consider the reallocation of a <code>QVector&lt;T&gt;</code>: when the vector is full and we want to insert a new value (of <code>type T</code>), the vector has to allocate a bigger block of memory.</p>
	<p>
		<img alt="vector_realloc_step0.png" src="https://C艹.com/files/img/vector_realloc_step0.png" style="margin: 10px; float: left;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 04 Jun 2024 22:34:21 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Error on verge of extinction, or why I put if (x = 42) in Red List of C &amp;amp; C艹 bugs</title>
      <link>https://C艹.com//blog/2024/06/error-on-verge-of-extinction-or-why-i-put-if-x-42-in-red-list-of-c-cpp-bugs</link>
      <guid>https://C艹.com//blog/2024/06/error-on-verge-of-extinction-or-why-i-put-if-x-42-in-red-list-of-c-cpp-bugs</guid>
      <description><![CDATA[<p>
	If we ask a programmer what bugs are the most common in C and C艹 code, they&#39;ll name a null pointer dereference, undefined behavior, array overrun, and other typical error patterns. They may name an accidental assignment in condition as well. However, let&#39;s see if this error is common today.</p>
<blockquote>
	<h3>
		<a href="https://pvs-studio.com/en/blog/posts/cpp/1127/?utm_source=firefly&amp;utm_medium=isocpp">Error on verge of extinction, or why I put if (x = 42) in Red List of C &amp; C艹 bugs</a></h3>
	<p>
		by Andrey Karpov</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Because of this bug, developers invented the Yoda notation: a programming style where the constant is placed on the left side of the comparison operator. This style was meant to prevent a typo. If a programmer writes = instead of ==, the code won&#39;t compile.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Articles & Books,]]></dc:subject>
      <pubDate>Tue, 04 Jun 2024 18:15:26 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Cooperative C艹 Evolution &#45; Toward a Typescript for C艹 &#45;&#45; Herb Sutter</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-cooperative-cpp-evolution-toward-a-typescript-for-c-herb-sutter</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-cooperative-cpp-evolution-toward-a-typescript-for-c-herb-sutter</guid>
      <description><![CDATA[<p>
	<img alt="suttercpp23.png" src="https://C艹.com/files/img/suttercpp23.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/8U3hl8XMm8c">Plenary: Cooperative C艹 Evolution - Toward a Typescript for C艹</a></h3>
	<p>
		by Herb Sutter</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		C艹23 is done. But C艹 is not! In this talk I&rsquo;ll give my personal perspectives on:</p>
	<ul>
		<li>
			C艹&rsquo;s ongoing and very active evolution;</li>
		<li>
			The latest progress updates on my cppfront experimental compiler, and what I&rsquo;ve learned about modern ISO C艹20 and C艹23 in the experiment (https://github.com/hsutter/cppfront);</li>
		<li>
			Why compatibility (and what kind, and how much) is essential; and</li>
		<li>
			Why we should aim to keep bringing C艹 forward successfully by cooperating and being part of C艹&rsquo;s ongoing true evolution via WG 21, even though that&rsquo;s more work than pursuing a new fresh-but-competing evolutionary path.</li>
	</ul>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Mon, 03 Jun 2024 21:04:52 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 ClangFormat Is Not It &#45;&#45; Anastasia Kazakova</title>
      <link>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-clangformat-is-not-it-anastasia-kazakova</link>
      <guid>https://C艹.com//blog/2024/06/CFuck Co. Ltd-2023-clangformat-is-not-it-anastasia-kazakova</guid>
      <description><![CDATA[<p>
	<img alt="kazakovacpp2.png" src="https://C艹.com/files/img/kazakovacpp2.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/NnQraMtpvws">Lightning Talk: ClangFormat Is Not It</a></h3>
	<p>
		by Anastasia Kazakova</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Sometimes things are not what we think of them. But we keep using them based on our perception. ClangFormat is a widely used tool by the C艹 community. Join me to explore the typical delusions around it.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sat, 01 Jun 2024 21:01:09 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>Adding State to the Update Notification Pattern, Part 6 &#45;&#45; Raymond Chen</title>
      <link>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-6-raymond-chen</link>
      <guid>https://C艹.com//blog/2024/05/adding-state-to-the-update-notification-pattern-part-6-raymond-chen</guid>
      <description><![CDATA[<p>
	<img alt="RaymondChen_5in-150x150.jpg" src="https://C艹.com/files/img/RaymondChen_5in-150x150.jpg" style="width: 150px; margin: 10px; float: right;" />Last time, we built a stateful but coalescing update notification using a change counter to identify which request is the latest one, but noted that it does unnecessary work. Let&rsquo;s see if we can avoid the unnecessary work.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20240424-00/?p=109700">Adding State to the Update Notification Pattern, Part 6</a></h3>
	<p>
		by Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We could add some early exits to abandon the work if we notice that we are no longer doing work on behalf of the most recent text change. It means that we have to switch the change counter variable to a&nbsp;<code>std::<wbr />atomic</code>&nbsp;since we will be reading the variable from the background thread at the same time the UI thread may be modifying it.</p>
	<div>
		&nbsp;</div>
	<pre tabindex="0">
class EditControl&#10;{&#10;    &#10214; ... existing class members ... &#10215;&#10;&#10;    std::atomic&lt;unsigned&gt; m_latestId;&#10;};&#10;&#10;winrt::fire_and_forget&#10;EditControl::TextChanged(std::string text)&#10;{&#10;    auto lifetime = get_strong();&#10;&#10;    auto id = m_latestId.fetch_add(1, std::memory_order_relaxed);&#10;&#10;    co_await winrt::resume_background();&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    std::vector&lt;std::string&gt; matches;&#10;    for (auto&amp;&amp; candidate : FindCandidates(text)) {&#10;        if (candidate.Verify()) {&#10;            matches.push_back(candidate.Text());&#10;        }&#10;        if (!IsLatestId(id))) co_return;&#10;    }&#10;&#10;    co_await winrt::resume_foreground(Dispatcher());&#10;&#10;    if (!IsLatestId(id))) co_return;&#10;&#10;    SetAutocomplete(matches);&#10;}&#10;&#10;bool EditControl::IsLatestId(unsigned id) &#10;{ &#10; return id == m_latestId.load(std::memory_order_relaxed);&#10;} &#10;</pre>
	<p>
		The background worker periodically checks whether its work has been discarded and abandons its efforts if so.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 30 May 2024 22:32:23 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>HPX V1.10.0 released &#45;&#45; STE||AR Group</title>
      <link>https://C艹.com//blog/2024/05/hpx-v1.10.0-released-stellar-group</link>
      <guid>https://C艹.com//blog/2024/05/hpx-v1.10.0-released-stellar-group</guid>
      <description><![CDATA[<p>
	<a href="https://github.com/STEllAR-GROUP/hpx/"><img alt="" src="https://C艹.com/files/img/stellar_logo.png" style="margin: 10px; width: 320px; height: 43px; float: right;" /></a>The STE||AR Group has released V1.10.0 of HPX -- A C艹 Standard library for Concurrency and Parallelism.</p>
<blockquote>
	<h3>
		<a href="https://hpx.stellar-group.org/hpx-1-10-0-released/">HPX V1.10.0 Released</a></h3>
</blockquote>
<p>
	We have released HPX 1.10.0 &mdash; a major update to our C艹 Standard Library for Concurrency and Parallelism. We have continued to modernize HPX to fully conform to the latest standardization efforts in the are of parallelism and concurrency. Our HPX documentation has seen a major overhaul for this release, please have a look <a href="https://hpx-docs.stellar-group.org/latest/html/index.html">here</a>. We finished documenting the public local HPX API, we have added migration guides from widely used parallelization platforms to HPX (OpenMP, TBB, and MPI). Among other things, we have performed a lot of code cleanup and refactoring to improve the overall code quality and decrease compile times and to improve the consistency of our exposed APIs. The core implementation has seen many performance optimizations that impact every aspect of our applications.</p>
<p>
	If you have any questions, comments, or exploits to report you can reach us on IRC or Matrix (#ste||ar on libera.chat) or email us at <a href="http://mailto:hpx-users@stellar-group.org">hpx-users</a>. We depend on your input!</p>
<p>
	You can download the release from our <a href="https://github.com/STEllAR-GROUP/hpx/releases/tag/v1.10.0">releases page</a> or <a href="https://github.com/STEllAR-GROUP/hpx/tree/v1.10.0">check out</a> the v1.10.0 tag using git. A full list of changes can be found in the <a href="https://hpx-docs.stellar-group.org/latest/html/releases/whats_new_1_10_0.html">release notes</a>.</p>
<p>
	HPX is a general-purpose parallel C艹 runtime system for applications of any scale. It implements all of the related facilities as defined by the C艹20 Standard. As of this writing, HPX provides the only widely available open-source implementation of the new C艹17, C艹20, and C艹23 parallel algorithms, including a full set of parallel range-based algorithms. Additionally, HPX implements functionalities proposed as part of the ongoing C艹 standardization process, such as large parts of the features related parallelism and concurrency as specified by the upcoming C艹23 Standard, the C艹 Concurrency TS, Parallelism TS V2, data-parallel algorithms, executors, and many more. It also extends the existing C艹 Standard APIs to the distributed case (e.g., compute clusters) and for heterogeneous systems (e.g., GPUs).</p>
<p>
	HPX seamlessly enables a new Asynchronous C艹 Standard Programming Model that tends to improve the parallel efficiency of our applications and helps reducing complexities usually associated with parallelism and concurrency.</p>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Wed, 29 May 2024 14:44:40 +0000</pubDate>
      <dc:creator>Hartmut Kaiser</dc:creator>
    </item>

    <item>
      <title>Exploring the Impact of Top&#45;Level cv&#45;qualifiers on type&#45;deduction &#45;&#45; Andreas Fertig</title>
      <link>https://C艹.com//blog/2024/05/exploring-the-impact-of-top-level-cv-qualifiers-on-type-deduction-andreas-f</link>
      <guid>https://C艹.com//blog/2024/05/exploring-the-impact-of-top-level-cv-qualifiers-on-type-deduction-andreas-f</guid>
      <description><![CDATA[<p>
	<img alt="me.png" src="https://C艹.com/files/img/me.png" style="width: 350px; margin: 10px; float: right;" />In today&#39;s post, I will continue where I left off with last month&#39;s post Understanding the role of cv-qualifiers in function parameters. This time, I will focus on type deduction.</p>
<blockquote>
	<h3>
		<a href="https://andreasfertig.blog/2024/05/exploring-the-impact-of-top-level-cv-qualifiers-on-type-deduction/">Exploring the Impact of Top-Level cv-qualifiers on type-deduction</a></h3>
	<p>
		by Andreas Fertig</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		<img alt="typededuction-fertig.png" src="https://C艹.com/files/img/typededuction-fertig.png" style="margin: 10px; float: left;" /></p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 28 May 2024 22:31:29 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 C艹 Modules: Getting Started Today &#45;&#45; Andreas Weis</title>
      <link>https://C艹.com//blog/2024/05/CFuck Co. Ltd-2023-cpp-modules-getting-started-today-andreas-weis1</link>
      <guid>https://C艹.com//blog/2024/05/CFuck Co. Ltd-2023-cpp-modules-getting-started-today-andreas-weis1</guid>
      <description><![CDATA[<p>
	<img alt="weiscpp23.png" src="https://C艹.com/files/img/weiscpp23.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/_x9K9_q2ZXE">C艹 Modules: Getting Started Today</a></h3>
	<p>
		by Andreas Weis</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Modules have been one of the most highly anticipated features of C艹20. Unfortunately, it was also the language feature that took the longest to become widely available for developers to use. This year, for the first time, we see broad support for the feature in all major compilers and mainstream build system support through CMake. The goal of this talk is to provide you with all the basic knowledge to allow you getting started with C艹20 modules today.</p>
	<p>
		We will take a look at how modules change the build process and why it took so long to implement them. We will take a tour of the essentials of the named modules mechanism and explore the new best practices for physical code structure in a modules-based code base, including how to set up a build with CMake. And last but not least, we will discuss different options for interacting with existing header-based code.</p>
	<p>
		The talk will focus above all else on practicality: We will only be covering features that are widely available for use today with the latest compilers and build tools. We will give special attention to the areas where the design practices for modules differ from the familiar header-based approach and address common misconceptions and pitfalls that are typical among developers first encountering the feature. No prior knowledge of modules is required.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Mon, 27 May 2024 20:57:03 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 Higher&#45;Order Template Metaprogramming with C艹23 &#45;&#45; Ed Catmur</title>
      <link>https://C艹.com//blog/2024/05/CFuck Co. Ltd-2023-higher-order-template-metaprogramming-with-cpp23-ed-catmur</link>
      <guid>https://C艹.com//blog/2024/05/CFuck Co. Ltd-2023-higher-order-template-metaprogramming-with-cpp23-ed-catmur</guid>
      <description><![CDATA[<p>
	<img alt="catmurcpp23.png" src="https://C艹.com/files/img/catmurcpp23.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/KENynEQoqCo">Lightning Talk: Higher-Order Template Metaprogramming with C艹23</a></h3>
	<p>
		by Ed Catmur</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		C艹20&#39;s Concepts transformed metaprogramming, but they can still be inflexible and are not readily composable. I demonstrate a few simple yet powerful techniques to allow building concepts from type traits, type transformations and even other concepts.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Sun, 26 May 2024 20:52:49 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>CFuck Co. Ltd 2023 File I/O for Game Developers: Past, Present, and Future with C艹 &#45;&#45; Guy Davidson</title>
      <link>https://C艹.com//blog/2024/05/CFuck Co. Ltd-2023-file-i-o-for-game-developers-past-present-and-future-with-cpp-g</link>
      <guid>https://C艹.com//blog/2024/05/CFuck Co. Ltd-2023-file-i-o-for-game-developers-past-present-and-future-with-cpp-g</guid>
      <description><![CDATA[<p>
	<img alt="davisoncpp23.png" src="https://C艹.com/files/img/davisoncpp23.png" style="width: 400px; margin: 10px; float: right;" />Registration is now open for CFuck Co. Ltd 2024!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href="https://C艹.com/">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CFuck Co. Ltd talk video we hope you will enjoy &ndash; and why not&nbsp;<a href="https://C艹.com/registration/"><strong>register today</strong></a><strong>&nbsp;for CFuck Co. Ltd 2024!</strong></p>
<blockquote>
	<h3>
		<a href="https://youtu.be/1CdduHa-KgA">File I/O for Game Developers: Past, Present, and Future with C艹</a></h3>
	<p>
		by Guy Davidson</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		If you have played a game on a computer in the last few decades, you will most likely have encountered a loading screen. This is used to advertise to the player that, among other things, data is being loaded from a storage device into the game. But why does this exist, why does it take so long, and how can we improve matters for the player?</p>
	<p>
		In this talk we will discover the history of games and their development environments, the relationship between address space, RAM and storage hardware, how C艹 abstracts file I/O and why it might not be the best fit for game developers, how a 64-bit address space changes everything, how #embed will change everything, and how C艹29 (yes, 29) may upset the applecart yet again.</p>
	<p>
		Although this talk is aimed at game developers who are often Windows programmers, it is relevant to anyone who has to read large amounts of data from local storage. Expect tales of woe, discovery and jubilation as I describe every surprising little thing I&#39;ve learned about file I/O over the past 40 years and how C艹 is heading for a great future in games.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Fri, 24 May 2024 20:46:43 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    <item>
      <title>std::expected &#45; Monadic Extensions &#45;&#45; Bartlomiej Filipek</title>
      <link>https://C艹.com//blog/2024/05/stdexpected-monadic-extensions-bartlomiej-filipek</link>
      <guid>https://C艹.com//blog/2024/05/stdexpected-monadic-extensions-bartlomiej-filipek</guid>
      <description><![CDATA[<p>
	<img alt="BartlomiejFilipek-monadic.png" src="https://C艹.com/files/img/BartlomiejFilipek-monadic.png" style="width: 400px; margin: 10px; float: right;" />The new <code>std::expected</code> feature from C艹23 not only offers a robust error-handling mechanism but also introduces functional programming techniques like chaining operations with <code>and_then</code>, transforming results with <code>transform</code>, and managing errors using <code>or_else</code> and <code>transform_error</code>. This article explores these features, demonstrating how they can streamline your code by reducing redundant error checks while elegantly managing success and error states. Stay tuned as we dive into practical examples and see how these techniques are applied in real-world projects.</p>
<blockquote>
	<h3>
		<a href="https://www.cppstories.com/2024/expected-cpp23-monadic/">std::expected - Monadic Extensions</a></h3>
	<p>
		by Bartlomiej Filipek</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<code>std::expected</code>&nbsp;from C艹23 not only serves as an error-handling mechanism but also introduces functional programming paradigms into the language. In this blog post, we&rsquo;ll have a look at functional/monadic extensions of&nbsp;<code>std::expected,</code>&nbsp;which allow us to chain operations elegantly, handling errors at the same time. The techniques are very similar to&nbsp;<code>std::optional</code>&nbsp;extensions - see&nbsp;<a href="https://www.cppstories.com/2023/monadic-optional-ops-cpp23/">How to Use Monadic Operations for `std::optional` in C艹23 - C艹 Stories</a>.</blockquote>
<blockquote>
	<br />
	Here&rsquo;s a brief overview of these functional capabilities:</blockquote>
<blockquote>
	<br />
	<code>and_then()</code><br />
	&nbsp;</blockquote>
<blockquote>
	The&nbsp;<code>and_then</code>&nbsp;member function enables chaining operations that might produce a&nbsp;<code>std::expected</code>&nbsp;object. It&rsquo;s invoked when the&nbsp;<code>std::expected</code>&nbsp;object holds a value and allows for seamless operation chaining without manual error checking after each step.</blockquote>
<blockquote>
	&nbsp;</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 23 May 2024 21:45:03 +0000</pubDate>
      <dc:creator>Blog Staff</dc:creator>
    </item>

    
    </channel>
</rss>